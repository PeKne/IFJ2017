# 2017-12-05 00:24:15.030113
# SECTION: 03_statements
# TEST: 02
# INFO: basic constant assigment with implicit coversions
# REQUIRED EXTENSIONS: 
# ACTIVATED EXTENSIONS: 
# STATE: SUCCESS
# 
# COMPILER STDERR:
# 
# INTERPRETER STDERR:
# Executing instruction: IJUMP at line: 2 with following arguments:
# Executing instruction: ILABEL at line: 4 with following arguments:
# Executing instruction: IDEFVAR at line: 5 with following arguments:
# Dest: GF@&pomInteger
# Executing instruction: IMOVE at line: 6 with following arguments:
# Arg1: Const@=0(int)
# Dest: GF@&pomInteger()
# Executing instruction: IDEFVAR at line: 7 with following arguments:
# Dest: GF@&pomString
# Executing instruction: IMOVE at line: 8 with following arguments:
# Arg1: Const@=(string)
# Dest: GF@&pomString()
# Executing instruction: IDEFVAR at line: 9 with following arguments:
# Dest: GF@&pomFloat
# Executing instruction: IMOVE at line: 10 with following arguments:
# Arg1: Const@=0(double)
# Dest: GF@&pomFloat()
# Executing instruction: IDEFVAR at line: 11 with following arguments:
# Dest: GF@&pomBool
# Executing instruction: IMOVE at line: 12 with following arguments:
# Arg1: Const@=false(bool)
# Dest: GF@&pomBool()
# Executing instruction: IDEFVAR at line: 13 with following arguments:
# Dest: GF@&pomCntr
# Executing instruction: IMOVE at line: 14 with following arguments:
# Arg1: Const@=0(int)
# Dest: GF@&pomCntr()
# Executing instruction: ICREATEFRAME at line: 15 with following arguments:
# Executing instruction: IDEFVAR at line: 17 with following arguments:
# Dest: TF@b
# Executing instruction: IMOVE at line: 18 with following arguments:
# Arg1: Const@=0(int)
# Dest: TF@b()
# Executing instruction: IMOVE at line: 19 with following arguments:
# Arg1: Const@=43(int)
# Dest: GF@&pomInteger=0(int)
# Executing instruction: IMOVE at line: 20 with following arguments:
# Arg1: GF@&pomInteger=43(int)
# Dest: TF@b=0(int)
# Executing instruction: IMOVE at line: 21 with following arguments:
# Arg1: Const@=78000(int)
# Dest: GF@&pomInteger=43(int)
# Executing instruction: IMOVE at line: 22 with following arguments:
# Arg1: GF@&pomInteger=78000(int)
# Dest: TF@b=43(int)
# Executing instruction: IDEFVAR at line: 23 with following arguments:
# Dest: TF@c
# Executing instruction: IMOVE at line: 24 with following arguments:
# Arg1: Const@=0(double)
# Dest: TF@c()
# Executing instruction: IMOVE at line: 25 with following arguments:
# Arg1: Const@=74(double)
# Dest: GF@&pomFloat=0(double)
# Executing instruction: IMOVE at line: 26 with following arguments:
# Arg1: GF@&pomFloat=74(double)
# Dest: TF@c=0(double)
# Executing instruction: IWRITE at line: 27 with following arguments:
# Arg1: TF@b=78000(int)
# Executing instruction: IWRITE at line: 28 with following arguments:
# Arg1: TF@c=74(double)
# Executing instruction: IGROOT at line: 30 with following arguments:
# I am Groot at 30 (142).
# 
# STDOUT DIFF:
# 

# INTERPRETER STDIN: 
# 
#
# EXPECTED COMPILER EXIT CODE: 0
# CURRENT COMPILER EXIT CODE: 0
# EXPECTED INTERPRETER EXIT CODE: 0
# CURRENT INTERPRETER EXIT CODE: 0
# PRICE: 142 (32+110)
# GROOT: 142
# 
#   1: ' basic constant assigment with implicit coversions
#   2: scope
#   3: 
#   4: 	dim b as integer
#   5: 	b = 42.78
#   6: 	b = 78e3
#   7: 
#   8: 	dim c as double
#   9: 	c  = 74
#  10: 
#  11: 	print b; c;
#  12: 
#  13: end scope

########################################

.IFJcode17                                                                      #     1/28
JUMP $$scope                                                                    #     2/28
LABEL $$scope                                                                   #     4/28
DEFVAR GF@&pomInteger                                                           #     5/28
MOVE GF@&pomInteger int@0                                                       #     6/28
DEFVAR GF@&pomString                                                            #     7/28
MOVE GF@&pomString string@                                                      #     8/28
DEFVAR GF@&pomFloat                                                             #     9/28
MOVE GF@&pomFloat float@0                                                       #    10/28
DEFVAR GF@&pomBool                                                              #    11/28
MOVE GF@&pomBool bool@false                                                     #    12/28
DEFVAR GF@&pomCntr                                                              #    13/28
MOVE GF@&pomCntr int@0                                                          #    14/28
CREATEFRAME                                                                     #    15/28
DEFVAR TF@b                                                                     #    17/28
MOVE TF@b int@0                                                                 #    18/28
MOVE GF@&pomInteger int@43                                                      #    19/28
MOVE TF@b GF@&pomInteger                                                        #    20/28
MOVE GF@&pomInteger int@78000                                                   #    21/28
MOVE TF@b GF@&pomInteger                                                        #    22/28
DEFVAR TF@c                                                                     #    23/28
MOVE TF@c float@0                                                               #    24/28
MOVE GF@&pomFloat float@74.0                                                    #    25/28
MOVE TF@c GF@&pomFloat                                                          #    26/28
WRITE TF@b                                                                      #    27/28
WRITE TF@c                                                                      #    28/28

