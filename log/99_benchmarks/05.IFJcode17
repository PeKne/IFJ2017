# 2017-12-04 12:08:01.859575
# SECTION: 99_benchmarks
# TEST: 05
# INFO: factorial by recursion
# REQUIRED EXTENSIONS: 
# ACTIVATED EXTENSIONS: 
# STATE: FAIL
# 
# COMPILER STDERR:
# ERROR - 2 - chyba v programu v rÃ¡mci syntaktickÃ© analÃ½zy (chybnÃ¡ syntaxe programu).
# 
# INTERPRETER STDERR:
# 
# EXPECTED INTERPRETER STDOUT:

#  3628800


# CURRENT INTERPRETER STDOUT:



# INTERPRETER STDIN: 
# 
#
# EXPECTED COMPILER EXIT CODE: 0
# CURRENT COMPILER EXIT CODE: 2
# EXPECTED INTERPRETER EXIT CODE: 0
# CURRENT INTERPRETER EXIT CODE: None
# PRICE: ---
# GROOT: ---
# 
#   1: ' factorial by recursion
#   2: declare function factorial (n As integer) As integer
#   3: function factorial (n As integer) As integer
#   4: 	dim temp_result As integer
#   5: 	dim decremented_n As integer
#   6: 	dim result As integer
#   7: 	if n < 2 Then
#   8: 		result = 1
#   9: 	Else
#  10: 		decremented_n = n - 1
#  11: 		temp_result = factorial(decremented_n)
#  12: 		result = n * temp_result
#  13: 	end if
#  14: 	Return result
#  15: end function
#  16: 
#  17: scope
#  18: 	dim res as integer
#  19: 	res = factorial(10)
#  20: 	print res;
#  21: end scope

########################################

.IFJcode17                                                                      #     1/54
JUMP $$scope                                                                    #     2/54
rule_par                                                                        #     4/54
rule next par                                                                   #     5/54
LABEL $factorial                                                                #     6/54
PUSHFRAME                                                                       #     7/54
DEFVAR LF@&retval                                                               #     8/54
DEFVAR LF@temp_result                                                           #     9/54
MOVE LF@temp_result int@0                                                       #    10/54
DEFVAR LF@decremented_n                                                         #    11/54
MOVE LF@decremented_n int@0                                                     #    12/54
DEFVAR LF@result                                                                #    13/54
MOVE LF@result int@0                                                            #    14/54
MOVE GF@&pomInteger LF@n                                                        #    15/54
redukce                                                                         #    16/54
LT GF@&pomBool LF@n int@2                                                       #    17/54
JUMPIFNEQ $$else_1 GF@&pomBool bool@true                                        #    18/54
MOVE GF@&pomInteger int@1                                                       #    19/54
MOVE LF@result GF@&pomInteger                                                   #    20/54
JUMP $$endif_1                                                                  #    21/54
LABEL $$else_1                                                                  #    22/54
MOVE GF@&pomInteger LF@n                                                        #    23/54
redukce                                                                         #    24/54
SUB GF@&pomInteger LF@n int@1                                                   #    25/54
MOVE LF@decremented_n GF@&pomInteger                                            #    26/54
CALL $factorial                                                                 #    27/54
MOVE LF@temp_result LF@&retval                                                  #    28/54
MOVE GF@&pomInteger LF@n                                                        #    29/54
redukce                                                                         #    30/54
MUL GF@&pomInteger LF@n LF@temp_result                                          #    31/54
MOVE LF@result GF@&pomInteger                                                   #    32/54
LABEL $$endif_1                                                                 #    33/54
MOVE GF@&pomInteger LF@result                                                   #    34/54
MOVE LF@&retval GF@&pomInteger                                                  #    35/54
POPFRAME                                                                        #    36/54
RETURN                                                                          #    37/54
LABEL $$scope                                                                   #    39/54
DEFVAR GF@&pomInteger                                                           #    40/54
MOVE GF@&pomInteger int@0                                                       #    41/54
DEFVAR GF@&pomString                                                            #    42/54
MOVE GF@&pomString string@                                                      #    43/54
DEFVAR GF@&pomFloat                                                             #    44/54
MOVE GF@&pomFloat float@0                                                       #    45/54
DEFVAR GF@&pomBool                                                              #    46/54
MOVE GF@&pomBool bool@false                                                     #    47/54
DEFVAR GF@&pomCntr                                                              #    48/54
MOVE GF@&pomCntr int@0                                                          #    49/54
CREATEFRAME                                                                     #    50/54
DEFVAR TF@res                                                                   #    52/54
MOVE TF@res int@0                                                               #    53/54
ERROR on line 19                                                                #    54/54

