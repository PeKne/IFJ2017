# 2017-12-04 16:26:33.524096
# SECTION: 99_benchmarks
# TEST: 05
# INFO: factorial by recursion
# REQUIRED EXTENSIONS: 
# ACTIVATED EXTENSIONS: 
# STATE: FAIL
# 
# COMPILER STDERR:
# ERROR - 2 - chyba v programu v rÃ¡mci syntaktickÃ© analÃ½zy (chybnÃ¡ syntaxe programu).
# 
# INTERPRETER STDERR:
# 
# EXPECTED INTERPRETER STDOUT:

#  3628800


# CURRENT INTERPRETER STDOUT:



# INTERPRETER STDIN: 
# 
#
# EXPECTED COMPILER EXIT CODE: 0
# CURRENT COMPILER EXIT CODE: 2
# EXPECTED INTERPRETER EXIT CODE: 0
# CURRENT INTERPRETER EXIT CODE: None
# PRICE: ---
# GROOT: ---
# 
#   1: ' factorial by recursion
#   2: declare function factorial (n As integer) As integer
#   3: function factorial (n As integer) As integer
#   4: 	dim temp_result As integer
#   5: 	dim decremented_n As integer
#   6: 	dim result As integer
#   7: 	if n < 2 Then
#   8: 		result = 1
#   9: 	Else
#  10: 		decremented_n = n - 1
#  11: 		temp_result = factorial(decremented_n)
#  12: 		result = n * temp_result
#  13: 	end if
#  14: 	Return result
#  15: end function
#  16: 
#  17: scope
#  18: 	dim res as integer
#  19: 	res = factorial(10)
#  20: 	print res;
#  21: end scope

########################################

.IFJcode17                                                                      #     1/51
JUMP $$scope                                                                    #     2/51
rule_par                                                                        #     4/51
rule next par                                                                   #     5/51
LABEL $factorial                                                                #     6/51
PUSHFRAME                                                                       #     7/51
DEFVAR LF@&retval                                                               #     8/51
DEFVAR LF@temp_result                                                           #     9/51
MOVE LF@temp_result int@0                                                       #    10/51
DEFVAR LF@decremented_n                                                         #    11/51
MOVE LF@decremented_n int@0                                                     #    12/51
DEFVAR LF@result                                                                #    13/51
MOVE LF@result int@0                                                            #    14/51
MOVE GF@&pomInteger LF@n                                                        #    15/51
LT GF@&pomBool LF@n int@2                                                       #    16/51
JUMPIFNEQ $$else_1 GF@&pomBool bool@true                                        #    17/51
MOVE GF@&pomInteger int@1                                                       #    18/51
MOVE LF@result GF@&pomInteger                                                   #    19/51
JUMP $$endif_1                                                                  #    20/51
LABEL $$else_1                                                                  #    21/51
MOVE GF@&pomInteger LF@n                                                        #    22/51
SUB GF@&pomInteger LF@n int@1                                                   #    23/51
MOVE LF@decremented_n GF@&pomInteger                                            #    24/51
CALL $factorial                                                                 #    25/51
MOVE LF@temp_result LF@&retval                                                  #    26/51
MOVE GF@&pomInteger LF@n                                                        #    27/51
MUL GF@&pomInteger LF@n LF@temp_result                                          #    28/51
MOVE LF@result GF@&pomInteger                                                   #    29/51
LABEL $$endif_1                                                                 #    30/51
MOVE GF@&pomInteger LF@result                                                   #    31/51
MOVE LF@&retval GF@&pomInteger                                                  #    32/51
POPFRAME                                                                        #    33/51
RETURN                                                                          #    34/51
LABEL $$scope                                                                   #    36/51
DEFVAR GF@&pomInteger                                                           #    37/51
MOVE GF@&pomInteger int@0                                                       #    38/51
DEFVAR GF@&pomString                                                            #    39/51
MOVE GF@&pomString string@                                                      #    40/51
DEFVAR GF@&pomFloat                                                             #    41/51
MOVE GF@&pomFloat float@0                                                       #    42/51
DEFVAR GF@&pomBool                                                              #    43/51
MOVE GF@&pomBool bool@false                                                     #    44/51
DEFVAR GF@&pomCntr                                                              #    45/51
MOVE GF@&pomCntr int@0                                                          #    46/51
CREATEFRAME                                                                     #    47/51
DEFVAR TF@res                                                                   #    49/51
MOVE TF@res int@0                                                               #    50/51
ERROR on line 19                                                                #    51/51

