# 2017-12-05 13:44:51.686092
# SECTION: 99_benchmarks
# TEST: 15
# INFO: Torture test without extensions
# REQUIRED EXTENSIONS: 
# ACTIVATED EXTENSIONS: 
# STATE: FAIL
# 
# COMPILER STDERR:
# ERROR - 3 - sÃ©mantickÃ¡ chyba v programu â nedefinovanÃ¡ funkce/promeÌnnÃ¡, pokus o redefinici funkce/promeÌnnÃ©, atd.
# 
# INTERPRETER STDERR:
# 
# EXPECTED INTERPRETER STDOUT:

# ?  2 0 704 682 660 638 616 594 572 550 528 506 484 462 440 418 396 374 352 330 308 286 264 242 220 198 176 154 132 1269.24 2538.49 3807.73 5076.98 2? ahoj
#  110
#  109
#  108
#  107
#  106
#  105
#  104
#  103
#  102
#  101
#  100
#  99
#  98
#  97
#  96
#  95
#  94
#  93
#  92
#  91
#  90
#  89
#  88
#  87
#  86
#  85
#  84
#  83
#  82
#  81
#  80
#  79
#  78
#  77
#  76
#  75
#  74
#  73
#  72
#  71
#  70
#  69
#  68
#  67
#  66
#  65
#  64
#  63
#  62
#  61
#  60
#  59
#  58
#  57
#  56
#  55
#  54
#  53
#  52
#  51
#  50
#  49
#  48
#  47
#  46
#  45
#  44
#  43
#  42
#  41
#  40
#  39
#  38
#  37
#  36
#  35
#  34
#  33
#  32
#  31
#  30
#  29
#  28
#  27
#  26
#  25
#  24
#  23
#  22
#  21
#  20
#  19
#  18
#  17
#  16
#  15
#  14
#  13
#  12
#  11
#  10
#  9
#  8
#  7
#  6
#  5
#  4
#  3
#  2
#  1
#  0
# -1
# -2
# -3
# -4
# -5
# -6
# -7
# -8
# -9
# -10
# -11
# -12
# -13
# -14
# -15
# -16
# -17
# -18
# -19
# -20
# -21
# -22
# -23
# -24
# -25
# -26
# -27
# -28
# -29
# -30
# -31
# -32
# -33
# -34
# -35
# -36
# -37
# -38
# -39
# -40
# -41
# -42
# -43
# -44
# -45
# -46
# -47
# -48
# -49
# -50
# -51
# -52
# -53
# -54
# -55
# -56
# -57
# -58
# -59
# -60
# -61
# -62
# -63
# -64
# -65
# -66
# -67
# -68
# -69
# -70
# -71
# -72
# -73
# -74
# -75
# -76
# -77
# -78
# -79
# -80
# -81
# -82
# -83
# -84
# -85
# -86
# -87
# -88
# -89
# -90
# -91
# -92
# -93
# -94
# -95
# -96
# -97
# -98
# -99
# -100
# -101
# -102
# -103
# -104
# -105
# -106
# -107
# -108
# -109
#  110
#  109
#  108
#  107
#  106
#  105
#  104
#  103
#  102
#  101
#  100
#  99
#  98
#  97
#  96
#  95
#  94
#  93
#  92
#  91
#  90
#  89
#  88
#  87
#  86
#  85
#  84
#  83
#  82
#  81
#  80
#  79
#  78
#  77
#  76
#  75
#  74
#  73
#  72
#  71
#  70
#  69
#  68
#  67
#  66
#  65
#  64
#  63
#  62
#  61
#  60
#  59
#  58
#  57
#  56
#  55
#  54
#  53
#  52
#  51
#  50
#  49
#  48
#  47
#  46
#  45
#  44
#  43
#  42
#  41
#  40
#  39
#  38
#  37
#  36
#  35
#  34
#  33
#  32
#  31
#  30
#  29
#  28
#  27
#  26
#  25
#  24
#  23
#  22
#  21
#  20
#  19
#  18
#  17
#  16
#  15
#  14
#  13
#  12
#  11
#  10
#  9
#  8
#  7
#  6
#  5
#  4
#  3
#  2
#  1
#  0
# -1
# -2
# -3
# -4
# -5
# -6
# -7
# -8
# -9
# -10
# -11
# -12
# -13
# -14
# -15
# -16
# -17
# -18
# -19
# -20
# -21
# -22
# -23
# -24
# -25
# -26
# -27
# -28
# -29
# -30
# -31
# -32
# -33
# -34
# -35
# -36
# -37
# -38
# -39
# -40
# -41
# -42
# -43
# -44
# -45
# -46
# -47
# -48
# -49
# -50
# -51
# -52
# -53
# -54
# -55
# -56
# -57
# -58
# -59
# -60
# -61
# -62
# -63
# -64
# -65
# -66
# -67
# -68
# -69
# -70
# -71
# -72
# -73
# -74
# -75
# -76
# -77
# -78
# -79
# -80
# -81
# -82
# -83
# -84
# -85
# -86
# -87
# -88
# -89
# -90
# -91
# -92
# -93
# -94
# -95
# -96
# -97
# -98
# -99
# -100
# -101
# -102
# -103
# -104
# -105
# -106
# -107
# -108
# -109
#  110
#  109
#  108
#  107
#  106
#  105
#  104
#  103
#  102
#  101
#  100
#  99
#  98
#  97
#  96
#  95
#  94
#  93
#  92
#  91
#  90
#  89
#  88
#  87
#  86
#  85
#  84
#  83
#  82
#  81
#  80
#  79
#  78
#  77
#  76
#  75
#  74
#  73
#  72
#  71
#  70
#  69
#  68
#  67
#  66
#  65
#  64
#  63
#  62
#  61
#  60
#  59
#  58
#  57
#  56
#  55
#  54
#  53
#  52
#  51
#  50
#  49
#  48
#  47
#  46
#  45
#  44
#  43
#  42
#  41
#  40
#  39
#  38
#  37
#  36
#  35
#  34
#  33
#  32
#  31
#  30
#  29
#  28
#  27
#  26
#  25
#  24
#  23
#  22
#  21
#  20
#  19
#  18
#  17
#  16
#  15
#  14
#  13
#  12
#  11
#  10
#  9
#  8
#  7
#  6
#  5
#  4
#  3
#  2
#  1
#  0
# -1
# -2
# -3
# -4
# -5
# -6
# -7
# -8
# -9
# -10
# -11
# -12
# -13
# -14
# -15
# -16
# -17
# -18
# -19
# -20
# -21
# -22
# -23
# -24
# -25
# -26
# -27
# -28
# -29
# -30
# -31
# -32
# -33
# -34
# -35
# -36
# -37
# -38
# -39
# -40
# -41
# -42
# -43
# -44
# -45
# -46
# -47
# -48
# -49
# -50
# -51
# -52
# -53
# -54
# -55
# -56
# -57
# -58
# -59
# -60
# -61
# -62
# -63
# -64
# -65
# -66
# -67
# -68
# -69
# -70
# -71
# -72
# -73
# -74
# -75
# -76
# -77
# -78
# -79
# -80
# -81
# -82
# -83
# -84
# -85
# -86
# -87
# -88
# -89
# -90
# -91
# -92
# -93
# -94
# -95
# -96
# -97
# -98
# -99
# -100
# -101
# -102
# -103
# -104
# -105
# -106
# -107
# -108
# -109
#  110
#  109
#  108
#  107
#  106
#  105
#  104
#  103
#  102
#  101
#  100
#  99
#  98
#  97
#  96
#  95
#  94
#  93
#  92
#  91
#  90
#  89
#  88
#  87
#  86
#  85
#  84
#  83
#  82
#  81
#  80
#  79
#  78
#  77
#  76
#  75
#  74
#  73
#  72
#  71
#  70
#  69
#  68
#  67
#  66
#  65
#  64
#  63
#  62
#  61
#  60
#  59
#  58
#  57
#  56
#  55
#  54
#  53
#  52
#  51
#  50
#  49
#  48
#  47
#  46
#  45
#  44
#  43
#  42
#  41
#  40
#  39
#  38
#  37
#  36
#  35
#  34
#  33
#  32
#  31
#  30
#  29
#  28
#  27
#  26
#  25
#  24
#  23
#  22
#  21
#  20
#  19
#  18
#  17
#  16
#  15
#  14
#  13
#  12
#  11
#  10
#  9
#  8
#  7
#  6
#  5
#  4
#  3
#  2
#  1
#  0
# -1
# -2
# -3
# -4
# -5
# -6
# -7
# -8
# -9
# -10
# -11
# -12
# -13
# -14
# -15
# -16
# -17
# -18
# -19
# -20
# -21
# -22
# -23
# -24
# -25
# -26
# -27
# -28
# -29
# -30
# -31
# -32
# -33
# -34
# -35
# -36
# -37
# -38
# -39
# -40
# -41
# -42
# -43
# -44
# -45
# -46
# -47
# -48
# -49
# -50
# -51
# -52
# -53
# -54
# -55
# -56
# -57
# -58
# -59
# -60
# -61
# -62
# -63
# -64
# -65
# -66
# -67
# -68
# -69
# -70
# -71
# -72
# -73
# -74
# -75
# -76
# -77
# -78
# -79
# -80
# -81
# -82
# -83
# -84
# -85
# -86
# -87
# -88
# -89
# -90
# -91
# -92
# -93
# -94
# -95
# -96
# -97
# -98
# -99
# -100
# -101
# -102
# -103
# -104
# -105
# -106
# -107
# -108
# -109 144Move disk 1 from row A to rod C
# Move disk 2 from row A to rod B
# Move disk 1 from row C to rod B
# Move disk 3 from row A to rod C
# Move disk 1 from row B to rod A
# Move disk 2 from row B to rod C
# Move disk 1 from row A to rod C
# Move disk 4 from row A to rod B
# Move disk 1 from row C to rod B
# Move disk 2 from row C to rod A
# Move disk 1 from row B to rod A
# Move disk 3 from row C to rod B
# Move disk 1 from row A to rod C
# Move disk 2 from row A to rod B
# Move disk 1 from row C to rod B
# -44485.3
#  114.453 6Toto je nejaky text
# Toto je nejaky text, ktery jeste trochu obohatime
# 4 znaky od  16. znaku v "Toto je nejaky text, ktery jeste trochu obohatime":text
# Zadejte serazenou posloupnost vsech malych pismen a-h, pricemz se pismena nesmeji v posloupnosti opakovat? ?
# Spatne zadana posloupnost, zkuste znovu? !Zadejte cislo pro vypocet faktorialu?  24 7.38837OK 1 2 3 4 5 6 7 8 9
#  2 4 6 8 10 12 14 16 18
#  3 6 9 12 15 18 21 24 27
#  4 8 12 16 20 24 28 32 36
#  5 10 15 20 25 30 35 40 45
#  6 12 18 24 30 36 42 48 54
#  7 14 21 28 35 42 49 56 63
#  8 16 24 32 40 48 56 64 72
#  9 18 27 36 45 54 63 72 81
#  barman barman barman barman barman barman barman barman barman barman barman barman barman barman barman barman barman barman barman barman barman barman barman barman barman barman barman barman barman barman barman barman barman barman barman barman barman barman barman barman barman barman 7.38837 13


# CURRENT INTERPRETER STDOUT:



# INTERPRETER STDIN: 
# 12
# ahoj
# abcdefg
# abcdefgh
# 4
#
# EXPECTED COMPILER EXIT CODE: 0
# CURRENT COMPILER EXIT CODE: 3
# EXPECTED INTERPRETER EXIT CODE: 0
# CURRENT INTERPRETER EXIT CODE: None
# PRICE: ---
# GROOT: ---
# 
#   1: ' Torture test without extensions
#   2: 
#   3: /''/'''''''''''''''''''''''''''''''''''''''
#   4: declare function __(ahoj as integer) as integer
#   5: /''/'''''''''''''''''''''''''''''''''''''''
#   6: /''/'''''''''''''''''''''''''''''''''''''''
#   7: ' factorial by recursion/''/'''''''''''''''''''''''''''''''''''''''
#   8: declare function factorial (n As integer) As integer/''/'''''''''''''''''''''''''''''''''''''''
#   9: /''/'''''''''''''''''''''''''''''''''''''''
#  10: function factorial (n As integer) As integer/''/'''''''''''''''''''''''''''''''''''''''
#  11: /''/dim temp_result As integer/''/'''''''''''''''''''''''''''''''''''''''
#  12: /''/dim decremented_n As integer/''/'''''''''''''''''''''''''''''''''''''''
#  13: /''/dim result As integer/''/'''''''''''''''''''''''''''''''''''''''
#  14: /''/if n < 2 Then/''/'''''''''''''''''''''''''''''''''''''''
#  15: /''//''/result = 1/''/'''''''''''''''''''''''''''''''''''''''
#  16: /''/Else/''/'''''''''''''''''''''''''''''''''''''''
#  17: /''/decremented_n = n - 1/''/'''''''''''''''''''''''''''''''''''''''
#  18: /''/temp_result = factorial(decremented_n)/''/'''''''''''''''''''''''''''''''''''''''
#  19: /''/result = n * temp_result/''/'''''''''''''''''''''''''''''''''''''''
#  20: /''/end if/''/'''''''''''''''''''''''''''''''''''''''
#  21: /''/Return result/''/'''''''''''''''''''''''''''''''''''''''
#  22: end function/''/'''''''''''''''''''''''''''''''''''''''
#  23: /''/'''''''''''''''''''''''''''''''''''''''
#  24: declare function multiply(_GHH as integer, ghgj__5667 as integer) as integer/''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''/
#  25: /''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''/
#  26: function foo(a as integer) as integer
#  27:     dim b as integer = a
#  28:     dim c as integer
#  29:     c = __(b)
#  30:     print c;
#  31:     return b + 10
#  32: end function
#  33: 
#  34: declare function hanoi(________________ as integer, from as string, too as string, middle as string) as integer
#  35: 
#  36: function __(a as integer) as integer
#  37:     dim bl__6790 as integer
#  38:     dim aa as integer = a - 1
#  39:     if a > 2 then
#  40:         bl__6790 = __(aa)
#  41:         return 0
#  42:     else
#  43:         print a;
#  44:         return 0
#  45:     end if
#  46: end function
#  47: 
#  48: ' big count of function parameters
#  49:     
#  50: function testing(n as integer, a AS double, b AS double, c AS double, d AS integer, e AS double, f AS double, g AS integer, h AS integer, i AS integer, j AS double, k AS double, l AS integer, m AS double, o AS integer, p AS integer, q AS integer, r AS double, s AS double, t AS double, u AS double, v AS integer, w AS double, x AS double, y AS integer, z AS integer, aa AS double, ab AS double, ac AS integer, ad AS integer, ae AS integer, af AS double, ag AS integer, ah AS double, ai AS integer, aj AS integer, ak AS double, al AS double, am AS double, an AS double, ao AS integer, ap AS integer, aq AS double, ar AS integer, at AS integer, au AS double, av AS integer, aw AS integer, ax AS integer, ay AS integer, az AS integer, ba AS double, bb AS integer, bc AS double, bd AS double, be AS double, bf AS integer, bg AS double, bh AS integer, bi AS integer, bj AS integer, bk AS integer, bl AS integer, bm AS double, bn AS double, bo AS integer, bp AS double, bq AS double, br AS integer, bs AS integer, bt AS double, bu AS double, bv AS integer, bw AS double, bx AS integer, by AS integer, bz AS double, ca AS double, cb AS double, cc AS integer, cd AS double, ce AS integer, cf AS integer, cg AS double, ch AS double, ci AS integer, cj AS double, ck AS double, cl AS double, cm AS double, cn AS integer, co AS double, cp AS double, cq AS double, cr AS integer, cs AS integer, ct AS integer, cu AS double, cv AS integer, cw AS double, cx AS integer) as integer
#  51:     dim res as integer
#  52:     if n > 0 then
#  53:         n = n - 1
#  54:         res = testing(n, a, b, c, d, e, f, g, h, i, j, k, l, m, o, p, q, r, s, t, u, v, w, x, y, z, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, an, ao, ap, aq, ar, at, au, av, aw, ax, ay, az, ba, bb, bc, bd, be, bf, bg, bh, bi, bj, bk, bl, bm, bn, bo, bp, bq, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, cd, ce, cf, cg, ch, ci, cj, ck, cl, cm, cn, co, cp, cq, cr, cs, ct, cu, cv, cw, cx)
#  55:         return res
#  56:     else 
#  57:         return a - b * c + d * e + f * g * h * i - j * k + l - m - o * p - q + r - s - t - u + v - w - x - y * z - aa + ab * ac - ad - ae * af - ag + ah * ai * aj + ak * al - am * an * ao + ap + aq + ar + at + au * av * aw + ax + ay + az - ba + bb + bc - bd - be * bf * bg - bh - bi + bj + bk - bl * bm - bn * bo * bp - bq * br * bs - bt + bu + bv - bw * bx * by - bz * ca * cb * cc + cd - ce * cf + cg * ch + ci - cj - ck - cl * cm + cn * co - cp - cq * cr - cs * ct + cu - cv * cw * cx 
#  58:     end if
#  59: end function
#  60: 
#  61: function hanoi(n as integer, from as string, too as string, middle as string) as integer
#  62:     dim c as integer
#  63:     dim HHLKJKLNJKNJKLHUHUHU as integer = n - 1
#  64:     if n = 1 then
#  65:         print !"Move disk 1 from row "; from; !" to rod "; too; !"\n";
#  66:         return 0
#  67:     else
#  68:     end if
#  69:     dim nn as integer = n - 1
#  70:     c = hanoi(nn, from, middle, too)
#  71:     print !"Move disk"; n; !" from row "; from; !" to rod "; too; !"\n";
#  72:     c = hanoi(nn, middle, too, from)
#  73: end function
#  74: ' TODO
#  75: 
#  76: declare function ackermann(FGJKL as integer, FGHJK as integer) as integer
#  77: 
#  78: 
#  79: /''/
#  80: function multiply(a as integer, b as integer) as integer '
#  81:     return a * b '
#  82: end function
#  83: 
#  84: ' Ackerman function for ackerman(2, 5)
#  85: function ackermann(m as integer, n as integer) as integer
#  86:     dim GHHGHHHHUUIOUHJJKJKJKL as integer
#  87:     dim FFFFFFGHIHJJIJJ as integer
#  88:     dim mm as integer = m - 1
#  89:     dim nn as integer = n - 1
#  90:     if m = 0 then
#  91:         return n + 1
#  92:     else
#  93:         if n = 0 then
#  94:             GHHGHHHHUUIOUHJJKJKJKL =  ackermann(mm, 1)
#  95:             return GHHGHHHHUUIOUHJJKJKJKL
#  96:         else
#  97:             GHHGHHHHUUIOUHJJKJKJKL = ackermann(m, nn)
#  98:             FFFFFFGHIHJJIJJ =  ackermann(mm, GHHGHHHHUUIOUHJJKJKJKL)
#  99:             return FFFFFFGHIHJJIJJ
#  100:         end if
#  101:     end if
#  102: end function
#  103: 
#  104: 
#  105: function fib(n as integer) as integer
#  106:     dim a as integer
#  107:     dim b as integer
#  108:     dim c as integer
#  109:     dim nn as integer = n - 1
#  110:     dim nnn as integer = n - 2
#  111:     if n = 0 then
#  112:         return 0
#  113:     else
#  114:         if n = 1 then
#  115:             return 1
#  116:         else
#  117:             a = fib(nn)
#  118:             b = fib(nnn)
#  119:             c = a + b
#  120:             return c
#  121:         end if
#  122:     end if
#  123:     return 0
#  124: end function
#  125: 
#  126: 
#  127: scope
#  128: 
#  129:     dim a as integer
#  130:     input a
#  131:     a = foo(a)
#  132:     
#  133:     dim b as integer = 31.7
#  134:     do while a > 2
#  135:         do while b > 5 
#  136:             print a * b;
#  137:             b = b - 1
#  138:         loop
#  139:         a = a - 1
#  140:     loop
#  141:     
#  142:     dim f as double = 31.2
#  143:     dim g as double = 4e2
#  144:     dim h as double = 4e2-2
#  145:     dim i as double = 4.4e2
#  146:     dim j as double = 4.4e-2
#  147:     
#  148:     dim __78d as integer = 1
#  149:     dim GKJ__78 as double
#  150:     do while __78d < 5 
#  151:         GKJ__78 = GKJ__78 + f + g + h + i + j
#  152:         __78d = __78d + 1
#  153:         print GKJ__78; 
#  154:     loop
#  155:     
#  156:     print a;
#  157:     
#  158:     dim __j33eno as string
#  159:     input __j33eno
#  160:     print __j33eno;
#  161: 
#  162:     dim _HHHGhjh79 as double = 47.86
#  163:     dim HHKL__6767 as integer = 110
#  164:     dim GJ__56GHGH_GGH as integer = 100 /'hdfhjfhadfadafjasfksadfjkadsjks'/
#  165:     if 47 > 32 then/'hdfhjfhadfadafjasfksadfjkadsjks'/
#  166:         do while _HHHGhjh79 > 44
#  167:             HHKL__6767 = 110
#  168:             GJ__56GHGH_GGH = 100
#  169:             do while GJ__56GHGH_GGH > 7
#  170:                 do while HHKL__6767 > 0-110
#  171:                     print !"\n";
#  172:                     if HHKL__6767 > 58 then
#  173:                         print HHKL__6767;
#  174:                     else
#  175:                         if HHKL__6767 > 0-60 then
#  176:                             print HHKL__6767;
#  177:                         else
#  178:                             print HHKL__6767;
#  179:                         end if
#  180:                     end if
#  181:                     HHKL__6767 = HHKL__6767 - 1
#  182:                     if HHKL__6767 = 0-110 then
#  183:                         GJ__56GHGH_GGH = 0
#  184:                     else
#  185:                     end if
#  186:                 loop
#  187:             loop
#  188:             _HHHGhjh79 = _HHHGhjh79 - 1.05
#  189:         loop
#  190:     else
#  191:         print 78;
#  192:     end if
#  193: /'hdfhjfhadfadafjasfksadfjkadsjks'/
#  194:     dim _GHLk_GJK__DSG as integer
#  195:     _gHLk_GjK__DSG = fib(12)
#  196:     print _GHLk_GJK__DSG;
#  197: 
#  198:     dim ______dkhfskldfhsdfsfhjghs as integer
#  199:     ______dkhfskldfhsdfsfhjghs = hanoi(4, !"A", !"B", !"C")
#  200: 
#  201:     dim SEDFGUHdfgh___ as integer = 74
#  202:     dim __aa11__aa11 as double = 745.745
#  203:     dim ________________________________ as double = 0-123456789
#  204:         
#  205:     dim _a_a__a_a__a_a__a_a__a_a__a_a_ as double
#  206: 
#  207:     ________________________________ = (SEDFGUHdfgh___ * SEDFGUHdfgh___) + __aa11__aa11 / __aa11__aa11 - __aa11__aa11 * SEDFGUHdfgh___ + (__aa11__aa11 * (SEDFGUHdfgh___ * SEDFGUHdfgh___ + __aa11__aa11 * SEDFGUHdfgh___ + ________________________________ * 7 + 2 * 5 * __aa11__aa11) - __aa11__aa11 * 78 * 96 - __aa11__aa11 * SEDFGUHdfgh___ + (__aa11__aa11 + ________________________________ + __aa11__aa11 + ________________________________ + __aa11__aa11 + ________________________________)) / ________________________________
#  208:     print ________________________________;
#  209:     print !"\n";
#  210:     _a_a__a_a__a_a__a_a__a_a__a_a_ = SEDFGUHdfgh___ + (__aa11__aa11 / ________________________________) - (7 + __aa11__aa11 - 0 / (2 * (4 - SEDFGUHdfgh___ + 8 * 9 / (________________________________ * 74 - ________________________________ + ________________________________ * (__aa11__aa11 * 8 + 4) + __aa11__aa11 * SEDFGUHdfgh___ / ________________________________ + 7) - SEDFGUHdfgh___ + 7) - SEDFGUHdfgh___ * __aa11__aa11 / __aa11__aa11) + 1)/4
#  211:     _a_a__a_a__a_a__a_a__a_a__a_a_ = _a_a__a_a__a_a__a_a__a_a__a_a_ - 2 * _a_a__a_a__a_a__a_a__a_a__a_a_
#  212:     print _a_a__a_a__a_a__a_a__a_a__a_a_;
#  213: 
#  214:     dim res as integer
#  215:     res = factorial(3)
#  216:     print res;
#  217: 
#  218:     'Hlavni telo programu
#  219:     dim s1 As String
#  220:     dim s2 As String
#  221:     dim s1len As Integer
#  222:     s1 = !"Toto je nejaky text"
#  223:     s2 = s1 + !", ktery jeste trochu obohatime"
#  224:     Print s1; !"\n"; s2; !"\n";
#  225:     s1len = Length(s1)
#  226:     s1len = s1len - 4 + 1
#  227:     s1 = SubStr(s2, s1len, 4)
#  228:     Print !"4 znaky od "; s1len; !". znaku v \""; s2; !"\":"; s1; !"\n";
#  229:     Print !"Zadejte serazenou posloupnost vsech malych pismen a-h, ";
#  230:     Print !"pricemz se pismena nesmeji v posloupnosti opakovat";
#  231:     Input s1
#  232:     print !"?";
#  233:     Do While (s1 <> !"abcdefgh")
#  234:         Print !"\nSpatne zadana posloupnost, zkuste znovu";
#  235:         Input s1
#  236:         print !"!";
#  237:     Loop
#  238: 
#  239:     /' Factorial by iteration method '/
#  240: 
#  241:     Dim qwertzuiolkjhgfdsayxcvbnm As Integer
#  242:     DIM vysl AS INTEGER
#  243:     PrinT !"Zadejte cislo pro vypocet faktorialu";
#  244:     InpuT qwertzuiolkjhgfdsayxcvbnm
#  245:     If qwertzuiolkjhgfdsayxcvbnm < 0 THEN
#  246:     print !"\nFaktorial nelze spocitat\n";
#  247:     ELSE
#  248:     Vysl = 1
#  249:     Do WHile qwertzuiolkjhgfdsayxcvbnm > 0
#  250:     VYSL = vysl * qwertzuiolkjhgfdsayxcvbnm
#  251:     qwertzuiolkjhgfdsayxcvbnm = qwertzuiolkjhgfdsayxcvbnm - 1
#  252:     LooP
#  253:     Print vYsl;
#  254:     end IF
#  255: 
#  256: 
#  257: 
#  258: /'hdfhjfhadfadafjasfksadfjkadsjks'//'hdfhjfhadfadafjasfksadfjkadsjks'//'hdfhjfhadfadafjasfksadfjkadsjks'//'hdfhjfhadfadafjasfksadfjkadsjks'//'hdfhjfhadfadafjasfksadfjkadsjks'//'hdfhjfhadfadafjasfksadfjkadsjks'/
#  259: 
#  260: 
#  261: 
#  262: 
#  263:     dim vysledek as double/'hdfhjfhadfadafjasfksadfjkadsjks'/
#  264:     dim citatel as integer/'hdfhjfhadfadafjasfksadfjkadsjks'/
#  265:     citatel = 1/'hdfhjfhadfadafjasfksadfjkadsjks'/
#  266:     dim jmenovatel as integer/'hdfhjfhadfadafjasfksadfjkadsjks'/
#  267:     jmenovatel = 1/'hdfhjfhadfadafjasfksadfjkadsjks'/
#  268: /'hdfhjfhadfadafjasfksadfjkadsjks'/
#  269:     dim pocitadlo as integer/'hdfhjfhadfadafjasfksadfjkadsjks'/
#  270:     pocitadlo = 1/'hdfhjfhadfadafjasfksadfjkadsjks'/
#  271: 
#  272:     do while pocitadlo < 20/'hdfhjfhadfadafjasfksadfjkadsjks'/
#  273: 
#  274:         vysledek = vysledek + citatel / jmenovatel/'hdfhjfhadfadafjasfksadfjkadsjks'/
#  275: 
#  276:         citatel = citatel * 2/'hdfhjfhadfadafjasfksadfjkadsjks'/
#  277:         jmenovatel = jmenovatel * pocitadlo/'hdfhjfhadfadafjasfksadfjkadsjks'/
#  278: 
#  279:         pocitadlo = pocitadlo + 1/'hdfhjfhadfadafjasfksadfjkadsjks'/
#  280: 
#  281:     loop/'hdfhjfhadfadafjasfksadfjkadsjks'/
#  282: 
#  283:     print vysledek;
#  284: 
#  285: 
#  286: 
#  287:     dim ___asdfghj___wertzu as integer
#  288:     ___asdfghj___wertzu = testing(10, 4, 1, 1, 8, 15, 8, 1, 7, 12, 4, 10, 0, 2, 8, 0, 7, 6, 15, 3, 5, 14, 11, 2, 5, 4, 6, 2, 13, 12, 0, 14, 10, 5, 4, 6, 13, 7, 10, 11, 13, 9, 12, 0, 7, 5, 13, 14, 4, 15, 13, 12, 5, 9, 14, 4, 14, 15, 5, 12, 9, 8, 3, 14, 11, 0, 3, 9, 3, 3, 14, 6, 7, 11, 4, 4, 12, 8, 11, 11, 4, 4, 4, 14, 3, 12, 6, 5, 11, 15, 3, 7, 0, 14, 5, 10, 15, 5, 1, 12, 5)
#  289:     if ___asdfghj___wertzu = 0-12697 then
#  290:         print !"OK";
#  291:     else
#  292:         print !"NONOK";
#  293:     end if
#  294: 
#  295: 
#  296:     dim DTRZU56855 as integer = 1
#  297:     dim __GHGR6767hhj as integer
#  298:     dim multiply_result as integer
#  299:     do while DTRZU56855 < 10 
#  300:     
#  301:         __GHGR6767hhj = 1
#  302:         
#  303:          do while __GHGR6767hhj < 10 
#  304:             multiply_result = multiply(DTRZU56855, __GHGR6767hhj)
#  305:             print multiply_result;
#  306:             
#  307:             __GHGR6767hhj = __GHGR6767hhj + 1
#  308:         loop
#  309:         print !"\n";
#  310:         DTRZU56855 = DTRZU56855 + 1
#  311:     loop
#  312: 
#  313:     dim buffer as string
#  314:     dim count as integer = 42
#  315:     do while count > 0
#  316:         buffer = !"" + buffer + !" barman" + !"" ' for price and optimalization
#  317:         count = count - 1
#  318:     loop
#  319:     print buffer;
#  320: 
#  321: 
#  322:     dim _______________LLLLLLLLLLLLL as double
#  323:     dim HJJJJJJJJJJJJJJJJJJJJJJJJJJK as integer
#  324:     HJJJJJJJJJJJJJJJJJJJJJJJJJJK = 1
#  325:     dim FGHGGGGGFGGGGGHGHGHGHGJGG as integer
#  326:     FGHGGGGGFGGGGGHGHGHGHGJGG = 1
#  327: 
#  328:     dim POIJIOPIOJIOPJIOJIOJIJIOP as integer
#  329:     POIJIOPIOJIOPJIOJIOJIJIOP = 1
#  330: 
#  331:     do while POIJIOPIOJIOPJIOJIOJIJIOP < 20
#  332: 
#  333:         _______________LLLLLLLLLLLLL = _______________LLLLLLLLLLLLL + HJJJJJJJJJJJJJJJJJJJJJJJJJJK / FGHGGGGGFGGGGGHGHGHGHGJGG
#  334: 
#  335:         HJJJJJJJJJJJJJJJJJJJJJJJJJJK = HJJJJJJJJJJJJJJJJJJJJJJJJJJK * 2
#  336:         FGHGGGGGFGGGGGHGHGHGHGJGG = FGHGGGGGFGGGGGHGHGHGHGJGG * POIJIOPIOJIOPJIOJIOJIJIOP
#  337: 
#  338:         POIJIOPIOJIOPJIOJIOJIJIOP = POIJIOPIOJIOPJIOJIOJIJIOP + 1
#  339: 
#  340:     loop
#  341: 
#  342:     print _______________LLLLLLLLLLLLL;
#  343: 
#  344: /''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''/
#  345: 
#  346: /''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''/
#  347: /''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''/
#  348: /''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''/
#  349: /''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''/
#  350: /''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''/
#  351: /''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''/
#  352: /''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''/
#  353: /''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''/
#  354: /''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''/
#  355: /''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''/
#  356: /''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''/
#  357: /''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''/
#  358: /''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''/
#  359: /''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''/
#  360: /''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''/
#  361: /''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''/
#  362: /''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''/
#  363: /''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''/
#  364: /''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''/
#  365: /''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''//''/
#  366: 
#  367: 
#  368: 
#  369: 
#  370: 
#  371: 
#  372:     dim ackermanwowowow______________ as integer
#  373:     ackermanwowowow______________ = ackermann(2, 5)
#  374:     print ackermanwowowow______________;
#  375: 
#  376:     
#  377: 
#  378: end scope

########################################

.IFJcode17                                                                      #     1/53
JUMP $$scope                                                                    #     2/53
rule_par                                                                        #     4/53
rule next par                                                                   #     5/53
rule_par                                                                        #     6/53
rule next par                                                                   #     7/53
LABEL $factorial                                                                #     8/53
PUSHFRAME                                                                       #     9/53
DEFVAR LF@&retval                                                               #    10/53
DEFVAR LF@temp_result                                                           #    11/53
MOVE LF@temp_result int@0                                                       #    12/53
DEFVAR LF@decremented_n                                                         #    13/53
MOVE LF@decremented_n int@0                                                     #    14/53
DEFVAR LF@result                                                                #    15/53
MOVE LF@result int@0                                                            #    16/53
MOVE GF@&pomInteger LF@n                                                        #    17/53
LT GF@&pomBool LF@n int@2                                                       #    18/53
JUMPIFNEQ $$else_1 GF@&pomBool bool@true                                        #    19/53
MOVE GF@&pomInteger int@1                                                       #    20/53
MOVE LF@result GF@&pomInteger                                                   #    21/53
JUMP $$endif_1                                                                  #    22/53
LABEL $$else_1                                                                  #    23/53
MOVE GF@&pomInteger LF@n                                                        #    24/53
SUB GF@&pomInteger LF@n int@1                                                   #    25/53
MOVE LF@decremented_n GF@&pomInteger                                            #    26/53
CALL $factorial                                                                 #    27/53
MOVE LF@temp_result LF@&retval                                                  #    28/53
MOVE GF@&pomInteger LF@n                                                        #    29/53
MUL GF@&pomInteger LF@n LF@temp_result                                          #    30/53
MOVE LF@result GF@&pomInteger                                                   #    31/53
LABEL $$endif_1                                                                 #    32/53
MOVE GF@&pomInteger LF@result                                                   #    33/53
MOVE LF@&retval GF@&pomInteger                                                  #    34/53
POPFRAME                                                                        #    35/53
RETURN                                                                          #    36/53
rule_par                                                                        #    38/53
rule next par                                                                   #    39/53
rule_par                                                                        #    40/53
rule next par                                                                   #    41/53
rule_par                                                                        #    42/53
rule next par                                                                   #    43/53
LABEL $foo                                                                      #    44/53
PUSHFRAME                                                                       #    45/53
DEFVAR LF@&retval                                                               #    46/53
DEFVAR LF@b                                                                     #    47/53
MOVE LF@b int@0                                                                 #    48/53
MOVE GF@&pomInteger LF@a                                                        #    49/53
MOVE LF@b GF@&pomInteger                                                        #    50/53
DEFVAR LF@c                                                                     #    51/53
MOVE LF@c int@0                                                                 #    52/53
ERROR on line 29                                                                #    53/53

