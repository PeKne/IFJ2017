# 2017-12-05 00:24:16.333048
# SECTION: 99_benchmarks
# TEST: 14
# INFO: Everything in one test
# REQUIRED EXTENSIONS: SCOPE
# ACTIVATED EXTENSIONS: 
# STATE: FAIL
# 
# COMPILER STDERR:
# 
# INTERPRETER STDERR:
# 
# EXPECTED INTERPRETER STDOUT:

# ?  2 0 704 682 660 638 616 594 572 550 528 506 484 462 440 418 396 374 352 330 308 286 264 242 220 198 176 154 132 1269.24 2538.49 3807.73 5076.98 2? ahoj
#  110
#  109
#  108
#  107
#  106
#  105
#  104
#  103
#  102
#  101
#  100
#  99
#  98
#  97
#  96
#  95
#  94
#  93
#  92
#  91
#  90
#  89
#  88
#  87
#  86
#  85
#  84
#  83
#  82
#  81
#  80
#  79
#  78
#  77
#  76
#  75
#  74
#  73
#  72
#  71
#  70
#  69
#  68
#  67
#  66
#  65
#  64
#  63
#  62
#  61
#  60
#  59
#  58
#  57
#  56
#  55
#  54
#  53
#  52
#  51
#  50
#  49
#  48
#  47
#  46
#  45
#  44
#  43
#  42
#  41
#  40
#  39
#  38
#  37
#  36
#  35
#  34
#  33
#  32
#  31
#  30
#  29
#  28
#  27
#  26
#  25
#  24
#  23
#  22
#  21
#  20
#  19
#  18
#  17
#  16
#  15
#  14
#  13
#  12
#  11
#  10
#  9
#  8
#  7
#  6
#  5
#  4
#  3
#  2
#  1
#  0
# -1
# -2
# -3
# -4
# -5
# -6
# -7
# -8
# -9
# -10
# -11
# -12
# -13
# -14
# -15
# -16
# -17
# -18
# -19
# -20
# -21
# -22
# -23
# -24
# -25
# -26
# -27
# -28
# -29
# -30
# -31
# -32
# -33
# -34
# -35
# -36
# -37
# -38
# -39
# -40
# -41
# -42
# -43
# -44
# -45
# -46
# -47
# -48
# -49
# -50
# -51
# -52
# -53
# -54
# -55
# -56
# -57
# -58
# -59
# -60
# -61
# -62
# -63
# -64
# -65
# -66
# -67
# -68
# -69
# -70
# -71
# -72
# -73
# -74
# -75
# -76
# -77
# -78
# -79
# -80
# -81
# -82
# -83
# -84
# -85
# -86
# -87
# -88
# -89
# -90
# -91
# -92
# -93
# -94
# -95
# -96
# -97
# -98
# -99
# -100
# -101
# -102
# -103
# -104
# -105
# -106
# -107
# -108
# -109
#  110
#  109
#  108
#  107
#  106
#  105
#  104
#  103
#  102
#  101
#  100
#  99
#  98
#  97
#  96
#  95
#  94
#  93
#  92
#  91
#  90
#  89
#  88
#  87
#  86
#  85
#  84
#  83
#  82
#  81
#  80
#  79
#  78
#  77
#  76
#  75
#  74
#  73
#  72
#  71
#  70
#  69
#  68
#  67
#  66
#  65
#  64
#  63
#  62
#  61
#  60
#  59
#  58
#  57
#  56
#  55
#  54
#  53
#  52
#  51
#  50
#  49
#  48
#  47
#  46
#  45
#  44
#  43
#  42
#  41
#  40
#  39
#  38
#  37
#  36
#  35
#  34
#  33
#  32
#  31
#  30
#  29
#  28
#  27
#  26
#  25
#  24
#  23
#  22
#  21
#  20
#  19
#  18
#  17
#  16
#  15
#  14
#  13
#  12
#  11
#  10
#  9
#  8
#  7
#  6
#  5
#  4
#  3
#  2
#  1
#  0
# -1
# -2
# -3
# -4
# -5
# -6
# -7
# -8
# -9
# -10
# -11
# -12
# -13
# -14
# -15
# -16
# -17
# -18
# -19
# -20
# -21
# -22
# -23
# -24
# -25
# -26
# -27
# -28
# -29
# -30
# -31
# -32
# -33
# -34
# -35
# -36
# -37
# -38
# -39
# -40
# -41
# -42
# -43
# -44
# -45
# -46
# -47
# -48
# -49
# -50
# -51
# -52
# -53
# -54
# -55
# -56
# -57
# -58
# -59
# -60
# -61
# -62
# -63
# -64
# -65
# -66
# -67
# -68
# -69
# -70
# -71
# -72
# -73
# -74
# -75
# -76
# -77
# -78
# -79
# -80
# -81
# -82
# -83
# -84
# -85
# -86
# -87
# -88
# -89
# -90
# -91
# -92
# -93
# -94
# -95
# -96
# -97
# -98
# -99
# -100
# -101
# -102
# -103
# -104
# -105
# -106
# -107
# -108
# -109
#  110
#  109
#  108
#  107
#  106
#  105
#  104
#  103
#  102
#  101
#  100
#  99
#  98
#  97
#  96
#  95
#  94
#  93
#  92
#  91
#  90
#  89
#  88
#  87
#  86
#  85
#  84
#  83
#  82
#  81
#  80
#  79
#  78
#  77
#  76
#  75
#  74
#  73
#  72
#  71
#  70
#  69
#  68
#  67
#  66
#  65
#  64
#  63
#  62
#  61
#  60
#  59
#  58
#  57
#  56
#  55
#  54
#  53
#  52
#  51
#  50
#  49
#  48
#  47
#  46
#  45
#  44
#  43
#  42
#  41
#  40
#  39
#  38
#  37
#  36
#  35
#  34
#  33
#  32
#  31
#  30
#  29
#  28
#  27
#  26
#  25
#  24
#  23
#  22
#  21
#  20
#  19
#  18
#  17
#  16
#  15
#  14
#  13
#  12
#  11
#  10
#  9
#  8
#  7
#  6
#  5
#  4
#  3
#  2
#  1
#  0
# -1
# -2
# -3
# -4
# -5
# -6
# -7
# -8
# -9
# -10
# -11
# -12
# -13
# -14
# -15
# -16
# -17
# -18
# -19
# -20
# -21
# -22
# -23
# -24
# -25
# -26
# -27
# -28
# -29
# -30
# -31
# -32
# -33
# -34
# -35
# -36
# -37
# -38
# -39
# -40
# -41
# -42
# -43
# -44
# -45
# -46
# -47
# -48
# -49
# -50
# -51
# -52
# -53
# -54
# -55
# -56
# -57
# -58
# -59
# -60
# -61
# -62
# -63
# -64
# -65
# -66
# -67
# -68
# -69
# -70
# -71
# -72
# -73
# -74
# -75
# -76
# -77
# -78
# -79
# -80
# -81
# -82
# -83
# -84
# -85
# -86
# -87
# -88
# -89
# -90
# -91
# -92
# -93
# -94
# -95
# -96
# -97
# -98
# -99
# -100
# -101
# -102
# -103
# -104
# -105
# -106
# -107
# -108
# -109
#  110
#  109
#  108
#  107
#  106
#  105
#  104
#  103
#  102
#  101
#  100
#  99
#  98
#  97
#  96
#  95
#  94
#  93
#  92
#  91
#  90
#  89
#  88
#  87
#  86
#  85
#  84
#  83
#  82
#  81
#  80
#  79
#  78
#  77
#  76
#  75
#  74
#  73
#  72
#  71
#  70
#  69
#  68
#  67
#  66
#  65
#  64
#  63
#  62
#  61
#  60
#  59
#  58
#  57
#  56
#  55
#  54
#  53
#  52
#  51
#  50
#  49
#  48
#  47
#  46
#  45
#  44
#  43
#  42
#  41
#  40
#  39
#  38
#  37
#  36
#  35
#  34
#  33
#  32
#  31
#  30
#  29
#  28
#  27
#  26
#  25
#  24
#  23
#  22
#  21
#  20
#  19
#  18
#  17
#  16
#  15
#  14
#  13
#  12
#  11
#  10
#  9
#  8
#  7
#  6
#  5
#  4
#  3
#  2
#  1
#  0
# -1
# -2
# -3
# -4
# -5
# -6
# -7
# -8
# -9
# -10
# -11
# -12
# -13
# -14
# -15
# -16
# -17
# -18
# -19
# -20
# -21
# -22
# -23
# -24
# -25
# -26
# -27
# -28
# -29
# -30
# -31
# -32
# -33
# -34
# -35
# -36
# -37
# -38
# -39
# -40
# -41
# -42
# -43
# -44
# -45
# -46
# -47
# -48
# -49
# -50
# -51
# -52
# -53
# -54
# -55
# -56
# -57
# -58
# -59
# -60
# -61
# -62
# -63
# -64
# -65
# -66
# -67
# -68
# -69
# -70
# -71
# -72
# -73
# -74
# -75
# -76
# -77
# -78
# -79
# -80
# -81
# -82
# -83
# -84
# -85
# -86
# -87
# -88
# -89
# -90
# -91
# -92
# -93
# -94
# -95
# -96
# -97
# -98
# -99
# -100
# -101
# -102
# -103
# -104
# -105
# -106
# -107
# -108
# -109 144Move disk 1 from row A to rod C
# Move disk 2 from row A to rod B
# Move disk 1 from row C to rod B
# Move disk 3 from row A to rod C
# Move disk 1 from row B to rod A
# Move disk 2 from row B to rod C
# Move disk 1 from row A to rod C
# Move disk 4 from row A to rod B
# Move disk 1 from row C to rod B
# Move disk 2 from row C to rod A
# Move disk 1 from row B to rod A
# Move disk 3 from row C to rod B
# Move disk 1 from row A to rod C
# Move disk 2 from row A to rod B
# Move disk 1 from row C to rod B
# -44485.3
#  114.453 6Toto je nejaky text
# Toto je nejaky text, ktery jeste trochu obohatime
# 4 znaky od  16. znaku v "Toto je nejaky text, ktery jeste trochu obohatime":text
# Zadejte serazenou posloupnost vsech malych pismen a-h, pricemz se pismena nesmeji v posloupnosti opakovat? ?
# Spatne zadana posloupnost, zkuste znovu? !Zadejte cislo pro vypocet faktorialu?  24 7.38837OK 1 2 3 4 5 6 7 8 9
#  2 4 6 8 10 12 14 16 18
#  3 6 9 12 15 18 21 24 27
#  4 8 12 16 20 24 28 32 36
#  5 10 15 20 25 30 35 40 45
#  6 12 18 24 30 36 42 48 54
#  7 14 21 28 35 42 49 56 63
#  8 16 24 32 40 48 56 64 72
#  9 18 27 36 45 54 63 72 81


# CURRENT INTERPRETER STDOUT:



# INTERPRETER STDIN: 
# 12
# ahoj
# abcdefg
# abcdefgh
# 4
#
# EXPECTED COMPILER EXIT CODE: 0
# CURRENT COMPILER EXIT CODE: None
# EXPECTED INTERPRETER EXIT CODE: 0
# CURRENT INTERPRETER EXIT CODE: None
# PRICE: ---
# GROOT: ---
# 
#   1: ' Everything in one test
#   2: 
#   3: ' big count of function parameters
#   4:     
#   5: function testing(n as integer, a AS double, b AS double, c AS double, d AS integer, e AS double, f AS double, g AS integer, h AS integer, i AS integer, j AS double, k AS double, l AS integer, m AS double, o AS integer, p AS integer, q AS integer, r AS double, s AS double, t AS double, u AS double, v AS integer, w AS double, x AS double, y AS integer, z AS integer, aa AS double, ab AS double, ac AS integer, ad AS integer, ae AS integer, af AS double, ag AS integer, ah AS double, ai AS integer, aj AS integer, ak AS double, al AS double, am AS double, an AS double, ao AS integer, ap AS integer, aq AS double, ar AS integer, at AS integer, au AS double, av AS integer, aw AS integer, ax AS integer, ay AS integer, az AS integer, ba AS double, bb AS integer, bc AS double, bd AS double, be AS double, bf AS integer, bg AS double, bh AS integer, bi AS integer, bj AS integer, bk AS integer, bl AS integer, bm AS double, bn AS double, bo AS integer, bp AS double, bq AS double, br AS integer, bs AS integer, bt AS double, bu AS double, bv AS integer, bw AS double, bx AS integer, by AS integer, bz AS double, ca AS double, cb AS double, cc AS integer, cd AS double, ce AS integer, cf AS integer, cg AS double, ch AS double, ci AS integer, cj AS double, ck AS double, cl AS double, cm AS double, cn AS integer, co AS double, cp AS double, cq AS double, cr AS integer, cs AS integer, ct AS integer, cu AS double, cv AS integer, cw AS double, cx AS integer) as integer
#   6:     dim res as integer
#   7:     if n > 0 then
#   8:         n = n - 1
#   9:         res = testing(n, a, b, c, d, e, f, g, h, i, j, k, l, m, o, p, q, r, s, t, u, v, w, x, y, z, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, an, ao, ap, aq, ar, at, au, av, aw, ax, ay, az, ba, bb, bc, bd, be, bf, bg, bh, bi, bj, bk, bl, bm, bn, bo, bp, bq, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, cd, ce, cf, cg, ch, ci, cj, ck, cl, cm, cn, co, cp, cq, cr, cs, ct, cu, cv, cw, cx)
#  10:         return res
#  11:     else 
#  12:         return a - b * c + d * e + f * g * h * i - j * k + l - m - o * p - q + r - s - t - u + v - w - x - y * z - aa + ab * ac - ad - ae * af - ag + ah * ai * aj + ak * al - am * an * ao + ap + aq + ar + at + au * av * aw + ax + ay + az - ba + bb + bc - bd - be * bf * bg - bh - bi + bj + bk - bl * bm - bn * bo * bp - bq * br * bs - bt + bu + bv - bw * bx * by - bz * ca * cb * cc + cd - ce * cf + cg * ch + ci - cj - ck - cl * cm + cn * co - cp - cq * cr - cs * ct + cu - cv * cw * cx 
#  13:     end if
#  14: end function
#  15: 
#  16: declare function __(ahoj as integer) as integer
#  17: 
#  18: function foo(a as integer) as integer
#  19:     dim b as integer = a
#  20:     dim c as integer
#  21:     c = __(b)
#  22:     print c;
#  23:     return b + 10
#  24: end function
#  25: 
#  26: ' Multiplier listing
#  27: 
#  28: function multiply(a as integer, b as integer) as integer
#  29:     return a * b
#  30: end function
#  31: 
#  32: ' factorial by recursion
#  33: declare function factorial (n As integer) As integer
#  34: 
#  35: function factorial (n As integer) As integer
#  36:     dim temp_result As integer
#  37:     dim decremented_n As integer
#  38:     dim result As integer
#  39:     if n < 2 Then
#  40:         result = 1
#  41:     Else
#  42:         decremented_n = n - 1
#  43:         temp_result = factorial(decremented_n)
#  44:         result = n * temp_result
#  45:     end if
#  46:     Return result
#  47: end function
#  48: 
#  49: function __(a as integer) as integer
#  50:     dim bl__6790 as integer
#  51:     if a > 2 then
#  52:         bl__6790 = __(a - 1)
#  53:         return 0
#  54:     else
#  55:         print a;
#  56:         return 0
#  57:     end if
#  58: end function
#  59: 
#  60: function fib(n as integer) as integer
#  61:     if n = 0 then
#  62:         return 0
#  63:     elseif n = 1 then
#  64:         return 1
#  65:     else
#  66:         dim a as integer
#  67:         dim b as integer
#  68:         dim c as integer
#  69:         a = fib(n - 1)
#  70:         b = fib(n - 2)
#  71:         c = a + b
#  72:         return c
#  73:     end if
#  74:     return 0
#  75: end function
#  76: 
#  77: function hanoi(n as integer, from as string, too as string, middle as string) as integer
#  78:     dim c as integer
#  79:     if n = 1 then
#  80:         print !"Move disk 1 from row "; from; !" to rod "; too; !"\n";
#  81:         return 0
#  82:     end if
#  83:     c = hanoi(n - 1, from, middle, too)
#  84:     print !"Move disk"; n; !" from row "; from; !" to rod "; too; !"\n";
#  85:     c = hanoi(n - 1, middle, too, from)
#  86: end function
#  87: 
#  88: 
#  89: scope
#  90:     dim a as integer
#  91:     input a
#  92:     a = foo(a)
#  93:     
#  94:     dim b as integer = 31.7
#  95:     do while a > 2
#  96:         do while b > 5 
#  97:             print a * b;
#  98:             b = b - 1
#  99:         loop
#  100:         a = a - 1
#  101:     loop
#  102:     
#  103:     dim f as double = 31.2
#  104:     dim g as double = 4e2
#  105:     dim h as double = 4e2-2
#  106:     dim i as double = 4.4e2
#  107:     dim j as double = 4.4e-2
#  108:     
#  109:     dim __78d as integer = 1
#  110:     dim GKJ__78 as double
#  111:     do while __78d < 5 
#  112:         GKJ__78 = GKJ__78 + f + g + h + i + j
#  113:         __78d = __78d + 1
#  114:         print GKJ__78; 
#  115:     loop
#  116:     
#  117:     print a;
#  118:     
#  119:     dim __j33eno as string
#  120:     input __j33eno
#  121:     print __j33eno;
#  122: 
#  123:     scope
#  124:     dim c as double = 47.86
#  125:     dim a as integer = 110
#  126:     dim b as integer = 100
#  127:     if 47 > 32 then
#  128:         do while c > 44
#  129:             a = 110
#  130:             b = 100
#  131:             do while b > 7
#  132:                 do while a > 0-110
#  133:                     print !"\n";
#  134:                     if a > 58 then
#  135:                         print a;
#  136:                     elseif a > 0-60 then
#  137:                         print a;
#  138:                     else
#  139:                         print a;
#  140:                     end if
#  141:                     a = a - 1
#  142:                     if a = 0-110 then
#  143:                         b = 0
#  144:                     end if
#  145:                 loop
#  146:             loop
#  147:             c = c - 1.05
#  148:         loop
#  149:     else
#  150:         print 78;
#  151:     end if
#  152:     
#  153:     end scope
#  154: 
#  155:     scope
#  156: 
#  157:         dim c as integer
#  158:         c = fib(12)
#  159:         print c;
#  160: 
#  161:     end scope
#  162: 
#  163:     scope
#  164: 
#  165:         dim c as integer
#  166:         c = hanoi(4, !"A", !"B", !"C")
#  167:     end scope
#  168: 
#  169:     ' complex expression
#  170: 
#  171:     scope
#  172:         dim a as integer = 74
#  173:         dim b as double = 745.745
#  174:         dim c as double = 0-123456789
#  175:         
#  176:         dim d as double
#  177: 
#  178:         c = (a * a) + b / b - b * a + (b * (a * a + b * a + c * 7 + 2 * 5 * b) - b * 78 * 96 - b * a + (b + c + b + c + b + c)) / c
#  179:         print c;
#  180:         print !"\n";
#  181:         d = a + (b / c) - (7 + b - 0 / (2 * (4 - a + 8 * 9 / (c * 74 - c + c * (b * 8 + 4) + b * a / c + 7) - a + 7) - a * b / b) + 1)/4
#  182:         d = d - 2 * d
#  183:         print d;
#  184:     end scope
#  185: 
#  186:     dim res as integer
#  187:     res = factorial(3)
#  188:     print res;
#  189: 
#  190:     ' reference program working with strings and builtin functions
#  191:     Scope
#  192:         'Hlavni telo programu
#  193:         dim s1 As String
#  194:         dim s2 As String
#  195:         dim s1len As Integer
#  196:         s1 = !"Toto je nejaky text"
#  197:         s2 = s1 + !", ktery jeste trochu obohatime"
#  198:         Print s1; !"\n"; s2; !"\n";
#  199:         s1len = Length(s1)
#  200:         s1len = s1len - 4 + 1
#  201:         s1 = SubStr(s2, s1len, 4)
#  202:         Print !"4 znaky od "; s1len; !". znaku v \""; s2; !"\":"; s1; !"\n";
#  203:         Print !"Zadejte serazenou posloupnost vsech malych pismen a-h, ";
#  204:         Print !"pricemz se pismena nesmeji v posloupnosti opakovat";
#  205:         Input s1
#  206:         print !"?";
#  207:         Do While (s1 <> !"abcdefgh")
#  208:             Print !"\nSpatne zadana posloupnost, zkuste znovu";
#  209:             Input s1
#  210:             print !"!";
#  211:         Loop
#  212:     End Scope
#  213: 
#  214:     ' factorial by iteration method
#  215: 
#  216:     scope 'Hlavni telo programu
#  217:     Dim a As Integer
#  218:     DIM vysl AS INTEGER
#  219:     PrinT !"Zadejte cislo pro vypocet faktorialu";
#  220:     InpuT A
#  221:     If a < 0 THEN
#  222:     print !"\nFaktorial nelze spocitat\n";
#  223:     ELSE
#  224:     Vysl = 1
#  225:     Do WHile A > 0
#  226:     VYSL = vysl * a
#  227:     a = A - 1
#  228:     LooP
#  229:     Print vYsl;
#  230:     end IF
#  231:     END SCOPE
#  232: 
#  233:     SCOPE
#  234: 
#  235:     dim vysledek as double
#  236:     dim citatel as integer
#  237:     citatel = 1
#  238:     dim jmenovatel as integer
#  239:     jmenovatel = 1
#  240: 
#  241:     dim pocitadlo as integer
#  242:     pocitadlo = 1
#  243: 
#  244:     do while pocitadlo < 20
#  245: 
#  246:         vysledek = vysledek + citatel / jmenovatel
#  247: 
#  248:         citatel = citatel * 2
#  249:         jmenovatel = jmenovatel * pocitadlo
#  250: 
#  251:         pocitadlo = pocitadlo + 1
#  252: 
#  253:     loop
#  254: 
#  255:     print vysledek;
#  256: 
#  257:     END SCOPE
#  258: 
#  259:     scope
#  260:         dim res as integer
#  261:         res = testing(10, 4, 1, 1, 8, 15, 8, 1, 7, 12, 4, 10, 0, 2, 8, 0, 7, 6, 15, 3, 5, 14, 11, 2, 5, 4, 6, 2, 13, 12, 0, 14, 10, 5, 4, 6, 13, 7, 10, 11, 13, 9, 12, 0, 7, 5, 13, 14, 4, 15, 13, 12, 5, 9, 14, 4, 14, 15, 5, 12, 9, 8, 3, 14, 11, 0, 3, 9, 3, 3, 14, 6, 7, 11, 4, 4, 12, 8, 11, 11, 4, 4, 4, 14, 3, 12, 6, 5, 11, 15, 3, 7, 0, 14, 5, 10, 15, 5, 1, 12, 5)
#  262:         if res = -12697 then
#  263:             print !"OK";
#  264:         else
#  265:             print !"NONOK";
#  266:         end if
#  267:     end scope
#  268: 
#  269:     scope
#  270:     dim a as integer = 1
#  271:     
#  272:     do while a < 10 
#  273:     
#  274:         dim b as integer = 1
#  275:         
#  276:          do while b < 10 
#  277:             
#  278:             print multiply(a, b);
#  279:             
#  280:             b = b + 1
#  281:         loop
#  282:         print !"\n";
#  283:         a = a + 1
#  284:     loop
#  285:     
#  286: end scope
#  287:         
#  288:     
#  289: end scope

########################################

# ---

