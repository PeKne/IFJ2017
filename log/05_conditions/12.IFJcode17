# 2017-12-05 13:44:50.668493
# SECTION: 05_conditions
# TEST: 12
# INFO: string compare
# REQUIRED EXTENSIONS: 
# ACTIVATED EXTENSIONS: 
# STATE: FAIL
# 
# COMPILER STDERR:
# Chyba v code_gen_expres TF@GF@&pomString TF@str1 TF@str2
# 
# INTERPRETER STDERR:
# Executing instruction: IJUMP at line: 2 with following arguments:
# Executing instruction: ILABEL at line: 4 with following arguments:
# Executing instruction: IDEFVAR at line: 5 with following arguments:
# Dest: GF@&pomInteger
# Executing instruction: IMOVE at line: 6 with following arguments:
# Arg1: Const@=0(int)
# Dest: GF@&pomInteger()
# Executing instruction: IDEFVAR at line: 7 with following arguments:
# Dest: GF@&pomString
# Executing instruction: IMOVE at line: 8 with following arguments:
# Arg1: Const@=(string)
# Dest: GF@&pomString()
# Executing instruction: IDEFVAR at line: 9 with following arguments:
# Dest: GF@&pomFloat
# Executing instruction: IMOVE at line: 10 with following arguments:
# Arg1: Const@=0(double)
# Dest: GF@&pomFloat()
# Executing instruction: IDEFVAR at line: 11 with following arguments:
# Dest: GF@&pomBool
# Executing instruction: IMOVE at line: 12 with following arguments:
# Arg1: Const@=false(bool)
# Dest: GF@&pomBool()
# Executing instruction: IDEFVAR at line: 13 with following arguments:
# Dest: GF@&pomCntr
# Executing instruction: IMOVE at line: 14 with following arguments:
# Arg1: Const@=0(int)
# Dest: GF@&pomCntr()
# Executing instruction: ICREATEFRAME at line: 15 with following arguments:
# Executing instruction: IDEFVAR at line: 17 with following arguments:
# Dest: TF@str1
# Executing instruction: IMOVE at line: 18 with following arguments:
# Arg1: Const@=(string)
# Dest: TF@str1()
# Executing instruction: IDEFVAR at line: 19 with following arguments:
# Dest: TF@str2
# Executing instruction: IMOVE at line: 20 with following arguments:
# Arg1: Const@=(string)
# Dest: TF@str2()
# Executing instruction: IMOVE at line: 21 with following arguments:
# Arg1: TF@str1=(string)
# Dest: GF@&pomString=(string)
# Executing instruction: IGT at line: 22 with following arguments:
# Arg1: TF@str1=(string)
# Arg2: TF@str2=(string)
# Dest: GF@&pomBool=false(bool)
# Executing instruction: IJUMPIFNEQ at line: 23 with following arguments:
# Arg1: GF@&pomBool=false(bool)
# Arg2: Const@=true(bool)
# Executing instruction: ILABEL at line: 26 with following arguments:
# Executing instruction: IWRITE at line: 27 with following arguments:
# Arg1: Const@=1(int)
# Executing instruction: ILABEL at line: 28 with following arguments:
# Executing instruction: IMOVE at line: 29 with following arguments:
# Arg1: TF@str1=(string)
# Dest: GF@&pomString=(string)
# Executing instruction: IJUMPIFNEQ at line: 30 with following arguments:
# Arg1: GF@&pomBool=false(bool)
# Arg2: Const@=true(bool)
# Executing instruction: ILABEL at line: 33 with following arguments:
# Executing instruction: IWRITE at line: 34 with following arguments:
# Arg1: Const@=0(int)
# Executing instruction: ILABEL at line: 35 with following arguments:
# Executing instruction: IMOVE at line: 36 with following arguments:
# Arg1: Const@=a(string)
# Dest: GF@&pomString=(string)
# Executing instruction: IMOVE at line: 37 with following arguments:
# Arg1: GF@&pomString=a(string)
# Dest: TF@str1=(string)
# Executing instruction: IMOVE at line: 38 with following arguments:
# Arg1: Const@=b(string)
# Dest: GF@&pomString=a(string)
# Executing instruction: IMOVE at line: 39 with following arguments:
# Arg1: GF@&pomString=b(string)
# Dest: TF@str2=(string)
# Executing instruction: IMOVE at line: 40 with following arguments:
# Arg1: TF@str1=a(string)
# Dest: GF@&pomString=b(string)
# Executing instruction: ILS at line: 41 with following arguments:
# Arg1: TF@str1=a(string)
# Arg2: TF@str2=b(string)
# Dest: GF@&pomBool=false(bool)
# Executing instruction: IJUMPIFNEQ at line: 42 with following arguments:
# Arg1: GF@&pomBool=true(bool)
# Arg2: Const@=true(bool)
# Executing instruction: IWRITE at line: 43 with following arguments:
# Arg1: Const@=1(int)
# Executing instruction: IJUMP at line: 44 with following arguments:
# Executing instruction: ILABEL at line: 47 with following arguments:
# Executing instruction: IMOVE at line: 48 with following arguments:
# Arg1: Const@=aa(string)
# Dest: GF@&pomString=a(string)
# Executing instruction: IMOVE at line: 49 with following arguments:
# Arg1: GF@&pomString=aa(string)
# Dest: TF@str1=a(string)
# Executing instruction: IMOVE at line: 50 with following arguments:
# Arg1: Const@=aac(string)
# Dest: GF@&pomString=aa(string)
# Executing instruction: IMOVE at line: 51 with following arguments:
# Arg1: GF@&pomString=aac(string)
# Dest: TF@str2=b(string)
# Executing instruction: IMOVE at line: 52 with following arguments:
# Arg1: TF@str2=aac(string)
# Dest: GF@&pomString=aac(string)
# Executing instruction: IGT at line: 53 with following arguments:
# Arg1: TF@str2=aac(string)
# Arg2: TF@str1=aa(string)
# Dest: GF@&pomBool=true(bool)
# Executing instruction: IJUMPIFNEQ at line: 54 with following arguments:
# Arg1: GF@&pomBool=true(bool)
# Arg2: Const@=true(bool)
# Executing instruction: IWRITE at line: 55 with following arguments:
# Arg1: Const@=1(int)
# Executing instruction: IJUMP at line: 56 with following arguments:
# Executing instruction: ILABEL at line: 59 with following arguments:
# Executing instruction: IGROOT at line: 61 with following arguments:
# I am Groot at 61 (277).
# 
# STDOUT DIFF:
# --- expected
# +++ actual
# @@ -1 +1 @@

# - 1 1 1 1
# + 1 0 1 1

# INTERPRETER STDIN: 
# 
#
# EXPECTED COMPILER EXIT CODE: 0
# CURRENT COMPILER EXIT CODE: 0
# EXPECTED INTERPRETER EXIT CODE: 0
# CURRENT INTERPRETER EXIT CODE: 0
# PRICE: ---
# GROOT: 277
# 
#   1: ' string compare
#   2: scope
#   3: 	dim str1 as string
#   4: 	dim str2 as string
#   5: 
#   6: 	if str1 > str2 then
#   7: 		print 0;
#   8: 	else
#   9: 		print 1;
#  10: 	end if
#  11: 
#  12: 	if str1 >= str2 then
#  13: 		print 1;
#  14: 	else
#  15: 		print 0;
#  16: 	end if
#  17: 
#  18: 	str1 = !"a"
#  19: 	str2 = !"b"
#  20: 	if str1 < str2 then
#  21: 		print 1;
#  22: 	else
#  23: 		print 0;
#  24: 	end if
#  25: 
#  26: 	str1 = !"aa"
#  27: 	str2 = !"aac"
#  28: 	if str2 > str1 then
#  29: 		print 1;
#  30: 	else
#  31: 		print 0;
#  32: 	end if
#  33: 
#  34: end scope

########################################

.IFJcode17                                                                      #     1/59
JUMP $$scope                                                                    #     2/59
LABEL $$scope                                                                   #     4/59
DEFVAR GF@&pomInteger                                                           #     5/59
MOVE GF@&pomInteger int@0                                                       #     6/59
DEFVAR GF@&pomString                                                            #     7/59
MOVE GF@&pomString string@                                                      #     8/59
DEFVAR GF@&pomFloat                                                             #     9/59
MOVE GF@&pomFloat float@0                                                       #    10/59
DEFVAR GF@&pomBool                                                              #    11/59
MOVE GF@&pomBool bool@false                                                     #    12/59
DEFVAR GF@&pomCntr                                                              #    13/59
MOVE GF@&pomCntr int@0                                                          #    14/59
CREATEFRAME                                                                     #    15/59
DEFVAR TF@str1                                                                  #    17/59
MOVE TF@str1 string@                                                            #    18/59
DEFVAR TF@str2                                                                  #    19/59
MOVE TF@str2 string@                                                            #    20/59
MOVE GF@&pomString TF@str1                                                      #    21/59
GT GF@&pomBool TF@str1 TF@str2                                                  #    22/59
JUMPIFNEQ $$else_1 GF@&pomBool bool@true                                        #    23/59
WRITE int@0                                                                     #    24/59
JUMP $$endif_1                                                                  #    25/59
LABEL $$else_1                                                                  #    26/59
WRITE int@1                                                                     #    27/59
LABEL $$endif_1                                                                 #    28/59
MOVE GF@&pomString TF@str1                                                      #    29/59
JUMPIFNEQ $$else_2 GF@&pomBool bool@true                                        #    30/59
WRITE int@1                                                                     #    31/59
JUMP $$endif_2                                                                  #    32/59
LABEL $$else_2                                                                  #    33/59
WRITE int@0                                                                     #    34/59
LABEL $$endif_2                                                                 #    35/59
MOVE GF@&pomString string@a                                                     #    36/59
MOVE TF@str1 GF@&pomString                                                      #    37/59
MOVE GF@&pomString string@b                                                     #    38/59
MOVE TF@str2 GF@&pomString                                                      #    39/59
MOVE GF@&pomString TF@str1                                                      #    40/59
LT GF@&pomBool TF@str1 TF@str2                                                  #    41/59
JUMPIFNEQ $$else_3 GF@&pomBool bool@true                                        #    42/59
WRITE int@1                                                                     #    43/59
JUMP $$endif_3                                                                  #    44/59
LABEL $$else_3                                                                  #    45/59
WRITE int@0                                                                     #    46/59
LABEL $$endif_3                                                                 #    47/59
MOVE GF@&pomString string@aa                                                    #    48/59
MOVE TF@str1 GF@&pomString                                                      #    49/59
MOVE GF@&pomString string@aac                                                   #    50/59
MOVE TF@str2 GF@&pomString                                                      #    51/59
MOVE GF@&pomString TF@str2                                                      #    52/59
GT GF@&pomBool TF@str2 TF@str1                                                  #    53/59
JUMPIFNEQ $$else_4 GF@&pomBool bool@true                                        #    54/59
WRITE int@1                                                                     #    55/59
JUMP $$endif_4                                                                  #    56/59
LABEL $$else_4                                                                  #    57/59
WRITE int@0                                                                     #    58/59
LABEL $$endif_4                                                                 #    59/59

