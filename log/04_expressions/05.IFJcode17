# 2017-12-05 13:44:50.450711
# SECTION: 04_expressions
# TEST: 05
# INFO: simple adding two vars to another variable
# REQUIRED EXTENSIONS: 
# ACTIVATED EXTENSIONS: 
# STATE: SUCCESS
# 
# COMPILER STDERR:
# 
# INTERPRETER STDERR:
# Executing instruction: IJUMP at line: 2 with following arguments:
# Executing instruction: ILABEL at line: 4 with following arguments:
# Executing instruction: IDEFVAR at line: 5 with following arguments:
# Dest: GF@&pomInteger
# Executing instruction: IMOVE at line: 6 with following arguments:
# Arg1: Const@=0(int)
# Dest: GF@&pomInteger()
# Executing instruction: IDEFVAR at line: 7 with following arguments:
# Dest: GF@&pomString
# Executing instruction: IMOVE at line: 8 with following arguments:
# Arg1: Const@=(string)
# Dest: GF@&pomString()
# Executing instruction: IDEFVAR at line: 9 with following arguments:
# Dest: GF@&pomFloat
# Executing instruction: IMOVE at line: 10 with following arguments:
# Arg1: Const@=0(double)
# Dest: GF@&pomFloat()
# Executing instruction: IDEFVAR at line: 11 with following arguments:
# Dest: GF@&pomBool
# Executing instruction: IMOVE at line: 12 with following arguments:
# Arg1: Const@=false(bool)
# Dest: GF@&pomBool()
# Executing instruction: IDEFVAR at line: 13 with following arguments:
# Dest: GF@&pomCntr
# Executing instruction: IMOVE at line: 14 with following arguments:
# Arg1: Const@=0(int)
# Dest: GF@&pomCntr()
# Executing instruction: ICREATEFRAME at line: 15 with following arguments:
# Executing instruction: IDEFVAR at line: 17 with following arguments:
# Dest: TF@a
# Executing instruction: IMOVE at line: 18 with following arguments:
# Arg1: Const@=0(int)
# Dest: TF@a()
# Executing instruction: IMOVE at line: 19 with following arguments:
# Arg1: Const@=0(int)
# Dest: GF@&pomInteger=0(int)
# Executing instruction: ISUB at line: 20 with following arguments:
# Arg1: Const@=0(int)
# Arg2: Const@=58(int)
# Dest: GF@&pomInteger=0(int)
# Executing instruction: IMOVE at line: 21 with following arguments:
# Arg1: GF@&pomInteger=-58(int)
# Dest: TF@a=0(int)
# Executing instruction: IDEFVAR at line: 22 with following arguments:
# Dest: TF@b
# Executing instruction: IMOVE at line: 23 with following arguments:
# Arg1: Const@=0(int)
# Dest: TF@b()
# Executing instruction: IMOVE at line: 24 with following arguments:
# Arg1: Const@=116(int)
# Dest: GF@&pomInteger=-58(int)
# Executing instruction: IMOVE at line: 25 with following arguments:
# Arg1: GF@&pomInteger=116(int)
# Dest: TF@b=0(int)
# Executing instruction: IMOVE at line: 26 with following arguments:
# Arg1: TF@a=-58(int)
# Dest: GF@&pomInteger=116(int)
# Executing instruction: IADD at line: 27 with following arguments:
# Arg1: TF@a=-58(int)
# Arg2: TF@b=116(int)
# Dest: GF@&pomInteger=-58(int)
# Executing instruction: IMOVE at line: 28 with following arguments:
# Arg1: GF@&pomInteger=58(int)
# Dest: TF@a=-58(int)
# Executing instruction: IWRITE at line: 29 with following arguments:
# Arg1: TF@a=58(int)
# Executing instruction: IGROOT at line: 31 with following arguments:
# I am Groot at 31 (163).
# 
# STDOUT DIFF:
# 

# INTERPRETER STDIN: 
# 
#
# EXPECTED COMPILER EXIT CODE: 0
# CURRENT COMPILER EXIT CODE: 0
# EXPECTED INTERPRETER EXIT CODE: 0
# CURRENT INTERPRETER EXIT CODE: 0
# PRICE: 163 (36+127)
# GROOT: 163
# 
#   1: ' simple adding two vars to another variable
#   2: scope
#   3:     dim a as integer = 0 - 58
#   4:     dim b as integer = 116
#   5:     a = a + b
#   6:     print a;
#   7: end scope

########################################

.IFJcode17                                                                      #     1/29
JUMP $$scope                                                                    #     2/29
LABEL $$scope                                                                   #     4/29
DEFVAR GF@&pomInteger                                                           #     5/29
MOVE GF@&pomInteger int@0                                                       #     6/29
DEFVAR GF@&pomString                                                            #     7/29
MOVE GF@&pomString string@                                                      #     8/29
DEFVAR GF@&pomFloat                                                             #     9/29
MOVE GF@&pomFloat float@0                                                       #    10/29
DEFVAR GF@&pomBool                                                              #    11/29
MOVE GF@&pomBool bool@false                                                     #    12/29
DEFVAR GF@&pomCntr                                                              #    13/29
MOVE GF@&pomCntr int@0                                                          #    14/29
CREATEFRAME                                                                     #    15/29
DEFVAR TF@a                                                                     #    17/29
MOVE TF@a int@0                                                                 #    18/29
MOVE GF@&pomInteger int@0                                                       #    19/29
SUB GF@&pomInteger int@0 int@58                                                 #    20/29
MOVE TF@a GF@&pomInteger                                                        #    21/29
DEFVAR TF@b                                                                     #    22/29
MOVE TF@b int@0                                                                 #    23/29
MOVE GF@&pomInteger int@116                                                     #    24/29
MOVE TF@b GF@&pomInteger                                                        #    25/29
MOVE GF@&pomInteger TF@a                                                        #    26/29
ADD GF@&pomInteger TF@a TF@b                                                    #    27/29
MOVE TF@a GF@&pomInteger                                                        #    28/29
WRITE TF@a                                                                      #    29/29

