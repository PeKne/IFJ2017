# 2017-12-05 13:44:50.456120
# SECTION: 04_expressions
# TEST: 06
# INFO: multiple operations with different priorities I
# REQUIRED EXTENSIONS: 
# ACTIVATED EXTENSIONS: 
# STATE: SUCCESS
# 
# COMPILER STDERR:
# 
# INTERPRETER STDERR:
# Executing instruction: IJUMP at line: 2 with following arguments:
# Executing instruction: ILABEL at line: 4 with following arguments:
# Executing instruction: IDEFVAR at line: 5 with following arguments:
# Dest: GF@&pomInteger
# Executing instruction: IMOVE at line: 6 with following arguments:
# Arg1: Const@=0(int)
# Dest: GF@&pomInteger()
# Executing instruction: IDEFVAR at line: 7 with following arguments:
# Dest: GF@&pomString
# Executing instruction: IMOVE at line: 8 with following arguments:
# Arg1: Const@=(string)
# Dest: GF@&pomString()
# Executing instruction: IDEFVAR at line: 9 with following arguments:
# Dest: GF@&pomFloat
# Executing instruction: IMOVE at line: 10 with following arguments:
# Arg1: Const@=0(double)
# Dest: GF@&pomFloat()
# Executing instruction: IDEFVAR at line: 11 with following arguments:
# Dest: GF@&pomBool
# Executing instruction: IMOVE at line: 12 with following arguments:
# Arg1: Const@=false(bool)
# Dest: GF@&pomBool()
# Executing instruction: IDEFVAR at line: 13 with following arguments:
# Dest: GF@&pomCntr
# Executing instruction: IMOVE at line: 14 with following arguments:
# Arg1: Const@=0(int)
# Dest: GF@&pomCntr()
# Executing instruction: ICREATEFRAME at line: 15 with following arguments:
# Executing instruction: IDEFVAR at line: 17 with following arguments:
# Dest: TF@a
# Executing instruction: IMOVE at line: 18 with following arguments:
# Arg1: Const@=0(int)
# Dest: TF@a()
# Executing instruction: IMOVE at line: 19 with following arguments:
# Arg1: Const@=2(int)
# Dest: GF@&pomInteger=0(int)
# Executing instruction: IMOVE at line: 20 with following arguments:
# Arg1: GF@&pomInteger=2(int)
# Dest: TF@a=0(int)
# Executing instruction: IDEFVAR at line: 21 with following arguments:
# Dest: TF@b
# Executing instruction: IMOVE at line: 22 with following arguments:
# Arg1: Const@=0(int)
# Dest: TF@b()
# Executing instruction: IMOVE at line: 23 with following arguments:
# Arg1: Const@=9(int)
# Dest: GF@&pomInteger=2(int)
# Executing instruction: IMOVE at line: 24 with following arguments:
# Arg1: GF@&pomInteger=9(int)
# Dest: TF@b=0(int)
# Executing instruction: IMOVE at line: 25 with following arguments:
# Arg1: TF@b=9(int)
# Dest: GF@&pomInteger=9(int)
# Executing instruction: IMULT at line: 26 with following arguments:
# Arg1: TF@a=2(int)
# Arg2: TF@b=9(int)
# Dest: GF@&pomInteger=9(int)
# Executing instruction: IADD at line: 27 with following arguments:
# Arg1: TF@b=9(int)
# Arg2: GF@&pomInteger=18(int)
# Dest: GF@&pomInteger=18(int)
# Executing instruction: IADD at line: 28 with following arguments:
# Arg1: GF@&pomInteger=27(int)
# Arg2: TF@b=9(int)
# Dest: GF@&pomInteger=27(int)
# Executing instruction: IMOVE at line: 29 with following arguments:
# Arg1: GF@&pomInteger=36(int)
# Dest: TF@a=2(int)
# Executing instruction: IWRITE at line: 30 with following arguments:
# Arg1: TF@a=36(int)
# Executing instruction: IGROOT at line: 32 with following arguments:
# I am Groot at 32 (185).
# 
# STDOUT DIFF:
# 

# INTERPRETER STDIN: 
# 
#
# EXPECTED COMPILER EXIT CODE: 0
# CURRENT COMPILER EXIT CODE: 0
# EXPECTED INTERPRETER EXIT CODE: 0
# CURRENT INTERPRETER EXIT CODE: 0
# PRICE: 185 (40+145)
# GROOT: 185
# 
#   1: ' multiple operations with different priorities I
#   2: scope
#   3:     dim a as integer = 2
#   4:     dim b as integer = 9
#   5:     a = b + a * b + b
#   6:     print a;
#   7: end scope

########################################

.IFJcode17                                                                      #     1/30
JUMP $$scope                                                                    #     2/30
LABEL $$scope                                                                   #     4/30
DEFVAR GF@&pomInteger                                                           #     5/30
MOVE GF@&pomInteger int@0                                                       #     6/30
DEFVAR GF@&pomString                                                            #     7/30
MOVE GF@&pomString string@                                                      #     8/30
DEFVAR GF@&pomFloat                                                             #     9/30
MOVE GF@&pomFloat float@0                                                       #    10/30
DEFVAR GF@&pomBool                                                              #    11/30
MOVE GF@&pomBool bool@false                                                     #    12/30
DEFVAR GF@&pomCntr                                                              #    13/30
MOVE GF@&pomCntr int@0                                                          #    14/30
CREATEFRAME                                                                     #    15/30
DEFVAR TF@a                                                                     #    17/30
MOVE TF@a int@0                                                                 #    18/30
MOVE GF@&pomInteger int@2                                                       #    19/30
MOVE TF@a GF@&pomInteger                                                        #    20/30
DEFVAR TF@b                                                                     #    21/30
MOVE TF@b int@0                                                                 #    22/30
MOVE GF@&pomInteger int@9                                                       #    23/30
MOVE TF@b GF@&pomInteger                                                        #    24/30
MOVE GF@&pomInteger TF@b                                                        #    25/30
MUL GF@&pomInteger TF@a TF@b                                                    #    26/30
ADD GF@&pomInteger TF@b GF@&pomInteger                                          #    27/30
ADD GF@&pomInteger GF@&pomInteger TF@b                                          #    28/30
MOVE TF@a GF@&pomInteger                                                        #    29/30
WRITE TF@a                                                                      #    30/30

