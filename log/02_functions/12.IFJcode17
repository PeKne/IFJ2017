# 2017-12-04 12:08:00.998166
# SECTION: 02_functions
# TEST: 12
# INFO: Recursive function
# REQUIRED EXTENSIONS: 
# ACTIVATED EXTENSIONS: 
# STATE: FAIL
# 
# COMPILER STDERR:
# ERROR - 2 - chyba v programu v rÃ¡mci syntaktickÃ© analÃ½zy (chybnÃ¡ syntaxe programu).
# 
# INTERPRETER STDERR:
# 
# EXPECTED INTERPRETER STDOUT:

#  42


# CURRENT INTERPRETER STDOUT:



# INTERPRETER STDIN: 
# 
#
# EXPECTED COMPILER EXIT CODE: 0
# CURRENT COMPILER EXIT CODE: 2
# EXPECTED INTERPRETER EXIT CODE: 0
# CURRENT INTERPRETER EXIT CODE: None
# PRICE: ---
# GROOT: ---
# 
#   1: ' Recursive function
#   2: 
#   3: function recursive(param as integer) as integer
#   4: 	dim param0 as integer = 12
#   5: 	dim res as integer = 10
#   6: 	param0 = param - 1
#   7: 	if param = 0 then
#   8: 		return 42
#   9: 	else
#  10: 	    res = recursive(param0)
#  11: 		return res
#  12: 	end if
#  13: end function
#  14: 
#  15: scope
#  16: 	dim a as integer = 12
#  17: 	a = recursive(4)
#  18: 	print a;
#  19: 
#  20: end scope 

########################################

.IFJcode17                                                                      #     1/52
JUMP $$scope                                                                    #     2/52
rule_par                                                                        #     4/52
rule next par                                                                   #     5/52
LABEL $recursive                                                                #     6/52
PUSHFRAME                                                                       #     7/52
DEFVAR LF@&retval                                                               #     8/52
DEFVAR LF@param0                                                                #     9/52
MOVE LF@param0 int@0                                                            #    10/52
MOVE GF@&pomInteger int@12                                                      #    11/52
MOVE LF@param0 GF@&pomInteger                                                   #    12/52
DEFVAR LF@res                                                                   #    13/52
MOVE LF@res int@0                                                               #    14/52
MOVE GF@&pomInteger int@10                                                      #    15/52
MOVE LF@res GF@&pomInteger                                                      #    16/52
MOVE GF@&pomInteger LF@param                                                    #    17/52
redukce                                                                         #    18/52
SUB GF@&pomInteger LF@param int@1                                               #    19/52
MOVE LF@param0 GF@&pomInteger                                                   #    20/52
MOVE GF@&pomInteger LF@param                                                    #    21/52
redukce                                                                         #    22/52
EQ GF@&pomBool LF@param int@0                                                   #    23/52
JUMPIFNEQ $$else_1 GF@&pomBool bool@true                                        #    24/52
JUMP $$endif_1                                                                  #    25/52
LABEL $$else_1                                                                  #    26/52
CALL $recursive                                                                 #    27/52
MOVE LF@res LF@&retval                                                          #    28/52
MOVE GF@&pomInteger LF@res                                                      #    29/52
LABEL $$endif_1                                                                 #    30/52
MOVE LF@&retval GF@&pomInteger                                                  #    31/52
POPFRAME                                                                        #    32/52
RETURN                                                                          #    33/52
LABEL $$scope                                                                   #    35/52
DEFVAR GF@&pomInteger                                                           #    36/52
MOVE GF@&pomInteger int@0                                                       #    37/52
DEFVAR GF@&pomString                                                            #    38/52
MOVE GF@&pomString string@                                                      #    39/52
DEFVAR GF@&pomFloat                                                             #    40/52
MOVE GF@&pomFloat float@0                                                       #    41/52
DEFVAR GF@&pomBool                                                              #    42/52
MOVE GF@&pomBool bool@false                                                     #    43/52
DEFVAR GF@&pomCntr                                                              #    44/52
MOVE GF@&pomCntr int@0                                                          #    45/52
CREATEFRAME                                                                     #    46/52
DEFVAR TF@a                                                                     #    48/52
MOVE TF@a int@0                                                                 #    49/52
MOVE GF@&pomInteger int@12                                                      #    50/52
MOVE TF@a GF@&pomInteger                                                        #    51/52
ERROR on line 17                                                                #    52/52

