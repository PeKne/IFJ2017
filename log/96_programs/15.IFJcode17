# 2017-12-04 16:26:33.509364
# SECTION: 96_programs
# TEST: 15
# INFO: Taylor polynom for log
# REQUIRED EXTENSIONS: 
# ACTIVATED EXTENSIONS: 
# STATE: FAIL
# 
# COMPILER STDERR:
# Chyba v code_gen_expres LF@GF@&pomString LF@i LF@n
# Chyba v code_gen_expres LF@GF@&pomString LF@i LF@n
# ERROR - 2 - chyba v programu v rÃ¡mci syntaktickÃ© analÃ½zy (chybnÃ¡ syntaxe programu).
# 
# INTERPRETER STDERR:
# 
# EXPECTED INTERPRETER STDOUT:

# ?  2.24298
# ? -2.06119


# CURRENT INTERPRETER STDOUT:



# INTERPRETER STDIN: 
# 12.25
# 0.125
#
# EXPECTED COMPILER EXIT CODE: 0
# CURRENT COMPILER EXIT CODE: 2
# EXPECTED INTERPRETER EXIT CODE: 0
# CURRENT INTERPRETER EXIT CODE: None
# PRICE: ---
# GROOT: ---
# 
#   1: 'Taylor polynom for log
#   2: 
#   3: function taylor_log(x as double, n as integer) as double
#   4: 	dim result as double
#   5: 	dim x_exp as double = 1
#   6: 	dim numerator_fraction as double
#   7: 	dim i as integer = 1
#   8: 
#   9: 	if x > 1 then
#  10: 		numerator_fraction = (x - 1) / x
#  11: 
#  12: 		do while i <= n
#  13: 			x_exp = x_exp * numerator_fraction
#  14: 			result = result + x_exp / i
#  15: 			i = i + 1
#  16: 		loop
#  17: 	else
#  18: 		x = 1 - x
#  19: 
#  20: 		do while i <= n
#  21: 			x_exp = x_exp * x
#  22: 			result = result - (x_exp / i)
#  23: 			i = i + 1
#  24: 		loop
#  25: 	end if
#  26: 	return result
#  27: end function
#  28: 
#  29: scope
#  30: 	dim d as double
#  31: 
#  32: 	input d
#  33: 	d = taylor_log(d, 10)
#  34: 	print d; !"\n";
#  35: 
#  36: 	input d
#  37: 	d = taylor_log(d, 20)
#  38: 	print d; !"\n";
#  39: end scope

########################################

.IFJcode17                                                                      #     1/87
JUMP $$scope                                                                    #     2/87
rule_par                                                                        #     4/87
rule next par                                                                   #     5/87
rule_par                                                                        #     6/87
rule next par                                                                   #     7/87
LABEL $taylor_log                                                               #     8/87
PUSHFRAME                                                                       #     9/87
DEFVAR LF@&retval                                                               #    10/87
DEFVAR LF@result                                                                #    11/87
MOVE LF@result float@0                                                          #    12/87
DEFVAR LF@x_exp                                                                 #    13/87
MOVE LF@x_exp float@0                                                           #    14/87
MOVE GF@&pomFloat float@1.0                                                     #    15/87
MOVE LF@x_exp GF@&pomFloat                                                      #    16/87
DEFVAR LF@numerator_fraction                                                    #    17/87
MOVE LF@numerator_fraction float@0                                              #    18/87
DEFVAR LF@i                                                                     #    19/87
MOVE LF@i int@0                                                                 #    20/87
MOVE GF@&pomInteger int@1                                                       #    21/87
MOVE LF@i GF@&pomInteger                                                        #    22/87
MOVE GF@&pomFloat LF@x                                                          #    23/87
GT GF@&pomBool LF@x int@1                                                       #    24/87
JUMPIFNEQ $$else_1 GF@&pomBool bool@true                                        #    25/87
MOVE GF@&pomFloat LF@x                                                          #    26/87
SUB GF@&pomFloat LF@x float@1                                                   #    27/87
DIV GF@&pomFloat GF@&pomFloat LF@x                                              #    28/87
MOVE LF@numerator_fraction GF@&pomFloat                                         #    29/87
LABEL $$loop_1                                                                  #    30/87
MOVE GF@&pomInteger LF@i                                                        #    31/87
JUMPIFNEQ $$loop_end_1 GF@&pomBool bool@true                                    #    32/87
MOVE GF@&pomFloat LF@x_exp                                                      #    33/87
MUL GF@&pomFloat LF@x_exp LF@numerator_fraction                                 #    34/87
MOVE LF@x_exp GF@&pomFloat                                                      #    35/87
MOVE GF@&pomFloat LF@result                                                     #    36/87
DIV GF@&pomFloat LF@x_exp LF@i                                                  #    37/87
ADD GF@&pomFloat LF@result GF@&pomFloat                                         #    38/87
MOVE LF@result GF@&pomFloat                                                     #    39/87
MOVE GF@&pomInteger LF@i                                                        #    40/87
ADD GF@&pomInteger LF@i int@1                                                   #    41/87
MOVE LF@i GF@&pomInteger                                                        #    42/87
JUMP $$loop_1                                                                   #    43/87
LABEL $$loop_end_1                                                              #    44/87
JUMP $$endif_1                                                                  #    45/87
LABEL $$else_1                                                                  #    46/87
MOVE GF@&pomFloat float@1.0                                                     #    47/87
SUB GF@&pomFloat float@1.0 LF@x                                                 #    48/87
MOVE LF@x GF@&pomFloat                                                          #    49/87
LABEL $$loop_2                                                                  #    50/87
MOVE GF@&pomInteger LF@i                                                        #    51/87
JUMPIFNEQ $$loop_end_2 GF@&pomBool bool@true                                    #    52/87
MOVE GF@&pomFloat LF@x_exp                                                      #    53/87
MUL GF@&pomFloat LF@x_exp LF@x                                                  #    54/87
MOVE LF@x_exp GF@&pomFloat                                                      #    55/87
MOVE GF@&pomFloat LF@result                                                     #    56/87
DIV GF@&pomFloat LF@x_exp LF@i                                                  #    57/87
SUB GF@&pomFloat LF@result GF@&pomFloat                                         #    58/87
MOVE LF@result GF@&pomFloat                                                     #    59/87
MOVE GF@&pomInteger LF@i                                                        #    60/87
ADD GF@&pomInteger LF@i int@1                                                   #    61/87
MOVE LF@i GF@&pomInteger                                                        #    62/87
JUMP $$loop_2                                                                   #    63/87
LABEL $$loop_end_2                                                              #    64/87
LABEL $$endif_1                                                                 #    65/87
MOVE GF@&pomFloat LF@result                                                     #    66/87
MOVE LF@&retval GF@&pomFloat                                                    #    67/87
POPFRAME                                                                        #    68/87
RETURN                                                                          #    69/87
LABEL $$scope                                                                   #    71/87
DEFVAR GF@&pomInteger                                                           #    72/87
MOVE GF@&pomInteger int@0                                                       #    73/87
DEFVAR GF@&pomString                                                            #    74/87
MOVE GF@&pomString string@                                                      #    75/87
DEFVAR GF@&pomFloat                                                             #    76/87
MOVE GF@&pomFloat float@0                                                       #    77/87
DEFVAR GF@&pomBool                                                              #    78/87
MOVE GF@&pomBool bool@false                                                     #    79/87
DEFVAR GF@&pomCntr                                                              #    80/87
MOVE GF@&pomCntr int@0                                                          #    81/87
CREATEFRAME                                                                     #    82/87
DEFVAR TF@d                                                                     #    84/87
MOVE TF@d float@0                                                               #    85/87
READ TF@d float                                                                 #    86/87
ERROR on line 33                                                                #    87/87

